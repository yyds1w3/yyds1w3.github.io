<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>travel</title>
  
  
  <link href="http://qingw.zxy/atom.xml" rel="self"/>
  
  <link href="http://qingw.zxy/"/>
  <updated>2025-03-08T05:37:27.404Z</updated>
  <id>http://qingw.zxy/</id>
  
  <author>
    <name>qingw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python库</title>
    <link href="http://qingw.zxy/2025/03/08/python%E5%BA%93/"/>
    <id>http://qingw.zxy/2025/03/08/python%E5%BA%93/</id>
    <published>2025-03-08T05:36:50.171Z</published>
    <updated>2025-03-08T05:37:27.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="numpy">numpy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;numpy&quot;&gt;numpy&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Stm32</title>
    <link href="http://qingw.zxy/2025/02/28/stm32/"/>
    <id>http://qingw.zxy/2025/02/28/stm32/</id>
    <published>2025-02-28T09:45:49.147Z</published>
    <updated>2025-03-08T04:54:21.731Z</updated>
    
    <content type="html"><![CDATA[<p>本人花费5天时间完成了stm32的基础, 小累, 现在总结一下</p><h2 id="总述">总述</h2><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    mindmap    STM32[STM32]        ))片上外设((            ((GPIO))                GPIOA                GPIOB                GPIOC                GPIOD                GPIOE            ((USART))                USART1                USART2                USART3            (&quot;AFIO(查看重映射)&quot;)            ((I2C))                I2C1                I2C2            ((SPI))                SPI1                SPI2            ((EXTI))                中断编程            ((TIM))                TIM1                TIM2                TIM3                TIM4            ((ADC))                ADC1                ADC2        ))时钟((  </pre></div><p><strong>STM32介绍</strong></p><table><thead><tr><th>st</th><th>公司名</th></tr></thead><tbody><tr><td>m32</td><td>微处理器32位</td></tr><tr><td>F103</td><td>产品系列</td></tr><tr><td>C8T6</td><td>规格型号</td></tr></tbody></table><p><strong>产品系列</strong></p><table><thead><tr><th>G</th><th>通用</th></tr></thead><tbody><tr><td>F</td><td>主流</td></tr><tr><td>H</td><td>高性能</td></tr><tr><td>L</td><td>低功耗</td></tr><tr><td>W</td><td>无线</td></tr></tbody></table><p><strong>规格型号</strong></p><table><thead><tr><th>字母</th><th>代表</th><th>补充</th></tr></thead><tbody><tr><td>C</td><td>引脚数</td><td>T=36 C=48</td></tr><tr><td>8</td><td>Flash容量</td><td>4 = 16kb, 8 = 64kb</td></tr><tr><td>T</td><td>封装类型</td><td>T=LQFP</td></tr><tr><td>6</td><td>温度范围</td><td>6 = -40℃ ~85℃</td></tr></tbody></table><p><strong>引脚</strong></p><table><thead><tr><th>VDD</th><th>供电(3.3v)</th></tr></thead><tbody><tr><td>VSS</td><td>地(0v)</td></tr><tr><td>NRST</td><td>复位</td></tr><tr><td>VBAT</td><td>备用电池</td></tr><tr><td>BOOTO</td><td>启动模式</td></tr><tr><td>其他</td><td>片上外设名+数字</td></tr></tbody></table><p><strong>比喻关系</strong></p><table><thead><tr><th>stm32</th><th>人体</th></tr></thead><tbody><tr><td>时钟</td><td>心脏</td></tr><tr><td>片上外设</td><td>器官</td></tr></tbody></table><h2 id="时钟">时钟</h2><h3 id="时钟的介绍和作用">时钟的介绍和作用</h3><blockquote><p>时钟信号是一种电子逻辑信号（电压或电流）,它以恒定频率在高低状态之间振荡,并像节拍器一样用于同步数字电路的动作<br><img src="/img/CLKsignal.png" alt=""></p></blockquote><p>故: 片上外设在使用前必须打开对应的时钟</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);</span><br><span class="line"><span class="comment">// RCC - Reset and Clock Control</span></span><br><span class="line"><span class="comment">// APBx - APB时钟线</span></span><br><span class="line"><span class="comment">// PeriphClockCmd - 外设时钟开关</span></span><br></pre></td></tr></table></figure><h3 id="时钟树">时钟树</h3><p><img src="/img/CLKTree.JPG" alt=""></p><blockquote><p>灰色默认关闭, 绿色默认开启<br>图示代码可以自己配置时钟树, stm32的startup文件里有自己的时钟树配置(可以注释掉)<br><img src="/img/stm32_start.png" alt=""><br>|树根|HSI HSE|<br>|-|-|<br>|树干|SYSCLK HCLK|<br>|树枝|PCLK1 PCLK2|<br>|树叶|片上外设…|</p></blockquote><p><strong>树根</strong></p><ul><li>HSE(High SpeedExternal) HSI(High SpeedInternal) 通常外接时钟频率更稳定</li></ul><blockquote><p>背景: HSE使用外部晶体或谐振器作为时钟源。这些外部元件的频率精度和稳定性通常非常高，因为它们是由石英等材料制成的，具有精确的物理特性。<br>相比之下，HSI是内部RC振荡器，其频率受到温度、电压和制造工艺变化的影响，因此稳定性较差。</p></blockquote><p><strong>分频器, 锁相环, 复用器</strong><br>|分频器|DIV|频率除法|<br>|-|-|<br>|锁相环|PLL|频率乘法|<br>|复用器|MUX|频率选择|</p><p><strong>树干</strong></p><ul><li>SYSCLK$\leq$72MHz</li><li>HCLK $\leq$72MHz<br>SYSCLK的三种来源</li></ul><table><thead><tr><th>HSE</th><th>4~16MHz</th></tr></thead><tbody><tr><td>HSI</td><td>8MHz</td></tr><tr><td>PLL</td><td>$\leq$72MHz</td></tr></tbody></table><p><strong>树枝</strong></p><pre class="mermaid">---title: 树枝---flowchart LR    i1("SYSCLK(<= 72MHz>)")    i2("HCLK(<= 72MHz>)")    i3("PCLK1(<= 36MHz>)")    i4("PCLK2(<= 72MHz>)")    i1-->|AHB|i2    i2-->|APB1|i3    i2-->|APB2|i4</pre><p><strong>树叶</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启片上外设</span></span><br><span class="line">RCC_APB2PeriphClockCmd(外设名字, ENABLE);</span><br><span class="line">RCC_APB1PeriphClockCmd(外设名字, ENABLE);</span><br><span class="line">RCC_AHBPeriphClockCmd(外设名字, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复位片上外设</span></span><br><span class="line">RCC_APB2PeriphResetCmd(外设名字, ENABLE);</span><br><span class="line">RCC_APB2PeriphResetCmd(外设名字, DISABLE);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实战">实战</h3><p><strong>自己配置时钟树</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_SystemCLK_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 0. 指令预取</span></span><br><span class="line">FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);</span><br><span class="line">FLASH_SetLatency(FLASH_ACR_LATENCY_2); <span class="comment">// SYS &lt;= 24MHz 0, SYS &lt;= 48MHz 1 , SYS &lt;= 72MHz 2</span></span><br><span class="line"><span class="comment">// 1. 打开HSE并等待</span></span><br><span class="line">RCC_HSEConfig(RCC_HSE_ON);</span><br><span class="line"><span class="keyword">while</span>(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);</span><br><span class="line"><span class="comment">// 2. 配置SYSCLK</span></span><br><span class="line">RCC_PLLCmd(ENABLE);</span><br><span class="line">RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);</span><br><span class="line"><span class="keyword">while</span>(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);</span><br><span class="line">RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);</span><br><span class="line"><span class="keyword">while</span>(RCC_GetSYSCLKSource() != RCC_SYSCLKSource_PLLCLK);</span><br><span class="line"><span class="comment">// 3. 配置HCLK, PCLK1, PCLK2</span></span><br><span class="line">RCC_HCLKConfig(RCC_SYSCLK_Div1);</span><br><span class="line">RCC_PCLK1Config(RCC_HCLK_Div2);</span><br><span class="line">RCC_PCLK2Config(RCC_HCLK_Div1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用CubeMX配置时钟树">利用CubeMX配置时钟树</h3><blockquote><p>将SYSCLK调到最大频率,剩下按需分频</p></blockquote><h2 id="片上外设">片上外设</h2><h3 id="GPIO">GPIO</h3><h4 id="简介">简介</h4><blockquote><p>一个stm32的传输信号的通道</p></blockquote><h4 id="GPIO的引脚">GPIO的引脚</h4><table><thead><tr><th>名称</th><th>引脚</th></tr></thead><tbody><tr><td>GPIOA</td><td>PA(0~15)</td></tr><tr><td>GPIOB</td><td>PB(0~15)</td></tr><tr><td>GPIOC</td><td>PC(13~15)</td></tr><tr><td>GPIOD</td><td>PD(0~1)</td></tr></tbody></table><h4 id="GPIO的工作模式">GPIO的工作模式</h4><h5 id="输出">输出</h5><p>输出模式名称</p><table><thead><tr><th>中文</th><th>英文</th></tr></thead><tbody><tr><td>通用输出推挽</td><td>OUT_PP</td></tr><tr><td>通用输出开漏</td><td>OUT_OD</td></tr><tr><td>复用输出推挽</td><td>AF_PP</td></tr><tr><td>复用输出开漏</td><td>AF_OD</td></tr></tbody></table><p>输出模式解释</p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>通用</td><td>CPU写值</td></tr><tr><td>复用</td><td>其他外设写值</td></tr><tr><td>推挽</td><td>0- 低电压 1- 高电压</td></tr><tr><td>开漏</td><td>0- 低电压 1- 高阻抗</td></tr></tbody></table><h5 id="输入">输入</h5><table><thead><tr><th>中文</th><th>英文</th><th>解释</th></tr></thead><tbody><tr><td>输入上拉</td><td>IPU</td><td>默认为1</td></tr><tr><td>输入下拉</td><td>IPD</td><td>默认为0</td></tr><tr><td>输入浮空</td><td>IN_FLOATING</td><td>电信号不稳定</td></tr><tr><td>模拟模式</td><td>AIN</td><td>用于ADC的模拟信号输入</td></tr></tbody></table><h4 id="GPIO的最大输出速率">GPIO的最大输出速率</h4><blockquote><p>注意: 越快越耗能</p></blockquote><ol><li>Low - 2MHz</li><li>Medium - 10MHz</li><li>High - 50MHz</li></ol><h4 id="GPIO的默认电压">GPIO的默认电压</h4><ol><li>GPIO_PULLUP</li><li>GPIO_PULLDOWN</li><li>不设置</li></ol><h4 id="GPIO的初始化">GPIO的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_OnBoardLEDInit</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE) = &#123;<span class="number">0</span>&#125;; <span class="comment">// 注意要初始化为0</span></span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line"></span><br><span class="line">GPIO_Init(GPIOC, &amp;GPIO_InitStruct);</span><br><span class="line">GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GPIO的读写操作">GPIO的读写操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GPIO_WriteBit(GPIOx, GPIO_Pin, BitValue); <span class="comment">// 写</span></span><br><span class="line">GPIO_ReadInputDataBit(GPIOx, GPIO_Pin); <span class="comment">// 读</span></span><br><span class="line">GPIO_ReadOutputDataBit(GPIOx, GPIO_Pin); <span class="comment">// 读</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="GPIO的HAL库">GPIO的HAL库</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_Init(GPIOx, *GPIO_IniStruct); <span class="comment">// 初始化引脚</span></span><br><span class="line">HAL_GPIO_DeInit(GPIOx, *GPIO_IniStruct); <span class="comment">// 重置引脚</span></span><br><span class="line"></span><br><span class="line">HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); <span class="comment">// 读</span></span><br><span class="line">HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PinState); <span class="comment">// 写</span></span><br><span class="line"><span class="comment">// GPIO_Pin_SET代表1, GPIO_Pin_RESET代表0</span></span><br><span class="line"></span><br><span class="line">HAL_GPIO_TogglePin(GPIOx, GPIO_Pin); <span class="comment">// 取反引脚电压</span></span><br><span class="line">HAL_GPIO_LockPin(GPIOx, GPIO_Pin); <span class="comment">// 锁定引脚电压</span></span><br></pre></td></tr></table></figure><h3 id="USART">USART</h3><h4 id="简介-2">简介</h4><blockquote><p>一个stm32发送接收数据的通道<br>前提: 收发双方的通信协议应该一致</p></blockquote><h4 id="连线方式">连线方式:</h4><table><thead><tr><th>stm32</th><th>usart</th></tr></thead><tbody><tr><td>vcc</td><td>vcc</td></tr><tr><td>gnd</td><td>gnd</td></tr><tr><td>Rxd</td><td>Txd</td></tr><tr><td>Txd</td><td>Rxd</td></tr></tbody></table><h4 id="USART的波特率">USART的波特率</h4><blockquote><p>波特率: 1s最多传输的数据位</p></blockquote><ol><li>9600</li><li>115200</li><li>921600</li></ol><h4 id="USART的数据位长度">USART的数据位长度</h4><ol><li>8b</li><li>9b</li></ol><h4 id="USART的停止位长度">USART的停止位长度</h4><ol><li>0.5</li><li>1</li><li>1.5</li><li>2</li></ol><h4 id="USART的校验方式">USART的校验方式</h4><ol><li>NO 无</li><li>EVEN 偶 会要求数据有偶数个1</li><li>ODD 奇 会要求数据有奇数个1</li></ol><h4 id="USART的收发方向">USART的收发方向</h4><ol><li>Tx 发</li><li>Rx 收</li><li>Tx | Rx 收发</li></ol><h4 id="USART的硬件流控">USART的硬件流控</h4><blockquote><p>硬件流控通过使用特定的硬件信号，在收发双方之间建立一种“握手”机制，确保数据传输的可靠性。</p></blockquote><ol><li>None</li><li>CTS</li><li>RTS</li><li>CTS | RTS</li></ol><h4 id="USART的标志位">USART的标志位</h4><table><thead><tr><th>PE(parity error)</th><th>奇偶校验错误</th></tr></thead><tbody><tr><td>FE(frame error)</td><td>帧格式错误</td></tr><tr><td>NE(noise error)</td><td>噪声错误</td></tr><tr><td>ORE(overrun error)</td><td>过载错误</td></tr></tbody></table><h4 id="USART的引脚">USART的引脚</h4><p>查看重映射表 --&gt; stm32使用手册的8.3<br><img src="/img/USART_remap.png" alt=""></p><h4 id="USART的引脚配置">USART的引脚配置</h4><p>查看外设引脚配置 --&gt; stm32使用手册的8.1.11<br><img src="/img/USART_IOconfig.png" alt=""></p><h4 id="USART的初始化">USART的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启时钟，USART总开关</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">   USART_Cmd(USART1, ENABLE); </span><br><span class="line"><span class="comment">// 配置参数</span></span><br><span class="line">USART_InitTypeDef USART_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">USART_InitStruct.USART_BaudRate = <span class="number">115200</span>;</span><br><span class="line">USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;</span><br><span class="line">USART_InitStruct.USART_Parity = USART_Parity_No;</span><br><span class="line">USART_InitStruct.USART_WordLength = USART_WordLength_8b;</span><br><span class="line">USART_InitStruct.USART_StopBits = USART_StopBits_1;</span><br><span class="line">USART_Init(USART1, &amp;USART_InitStruct);</span><br><span class="line"><span class="comment">// IO配置</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br></pre></td></tr></table></figure><h4 id="USART的常用封装函数">USART的常用封装函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_USART_SendByte</span><span class="params">(USART_TypeDef *USARTx, <span class="type">const</span> <span class="type">uint8_t</span> Data)</span></span><br><span class="line">&#123;</span><br><span class="line">My_USART_SendBytes(USARTx, &amp;Data, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">My_USART_SendBytes</span><span class="params">(USART_TypeDef *USARTx, <span class="type">const</span> <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Size == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint16_t</span> i=<span class="number">0</span>; i &lt; Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);</span><br><span class="line">USART_SendData(USARTx, pData[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">My_USART_SendChar</span><span class="params">(USART_TypeDef *USARTx, <span class="type">const</span> <span class="type">char</span> C)</span></span><br><span class="line">&#123;</span><br><span class="line">My_USART_SendBytes(USARTx, (<span class="type">const</span> <span class="type">uint8_t</span> *)&amp;C, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">My_USART_SendString</span><span class="params">(USART_TypeDef *USARTx, <span class="type">const</span> <span class="type">char</span> *Str)</span></span><br><span class="line">&#123;</span><br><span class="line">My_USART_SendBytes(USARTx, (<span class="type">const</span> <span class="type">uint8_t</span> *)Str, <span class="built_in">strlen</span>(Str));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">My_USART_Printf</span><span class="params">(USART_TypeDef *USARTx, <span class="type">const</span> <span class="type">char</span> *Format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> format_buffer[<span class="number">128</span>];</span><br><span class="line">va_list argptr;</span><br><span class="line"></span><br><span class="line">__va_start(argptr, Format);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vsprintf</span>(format_buffer, Format, argptr);</span><br><span class="line"></span><br><span class="line">__va_end(argptr);</span><br><span class="line"></span><br><span class="line">My_USART_SendString(USARTx, format_buffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">My_USART_ReceiveByte</span><span class="params">(USART_TypeDef *USARTx)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USARTx, USART_FLAG_RXNE) == RESET);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> USART_ReceiveData(USARTx);</span><br><span class="line">&#125;</span><br><span class="line">__weak <span class="type">uint16_t</span> <span class="title function_">My_USART_ReceiveBytes</span><span class="params">(USART_TypeDef *USARTx, <span class="type">uint8_t</span> *pDataOut, <span class="type">uint16_t</span> Size, <span class="type">int</span> Timeout)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> expireTime;</span><br><span class="line"></span><br><span class="line">Delay_Init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Timeout &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">expireTime = GetTick() + Timeout; <span class="comment">// 计算过期时间，过期时间 = 当前时间+Timeout</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_GetFlagStatus(USARTx, USART_FLAG_RXNE) == SET)</span><br><span class="line">&#123;</span><br><span class="line">pDataOut[i++] = USART_ReceiveData(USARTx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==Size) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(Timeout &lt; <span class="number">0</span> || GetTick() &lt; expireTime); <span class="comment">// 判断是否超时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">My_USART_ReceiveLine</span><span class="params">(USART_TypeDef *USARTx, <span class="type">char</span> *pStrOut, <span class="type">uint16_t</span> MaxLength, <span class="type">uint16_t</span> LineSeperator, <span class="type">int</span> Timeout)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果最大长度都不足以装下行分隔符</span></span><br><span class="line"><span class="comment">// 就直接返回失败</span></span><br><span class="line"><span class="keyword">if</span>(MaxLength &lt; <span class="number">2</span> || ((LineSeperator == LINE_SEPERATOR_CRLF) &amp;&amp; (MaxLength &lt; <span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line"><span class="type">uint32_t</span> expireTime;</span><br><span class="line">Delay_Init(); <span class="comment">// 要用到单片机当前时间，所以初始化延迟函数</span></span><br><span class="line"><span class="keyword">if</span>(Timeout &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">expireTime = GetTick() + Timeout; <span class="comment">// 计算过期时间，过期时间 = 当前时间+Timeout</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_GetFlagStatus(USARTx, USART_FLAG_RXNE) == SET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = (<span class="type">char</span>)USART_ReceiveData(USARTx);</span><br><span class="line">pStrOut[i++] = c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(LineSeperator == LINE_SEPERATOR_CR &amp;&amp; c == <span class="string">&#x27;\r&#x27;</span>) <span class="comment">// \r</span></span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(LineSeperator == LINE_SEPERATOR_LF &amp;&amp; c == <span class="string">&#x27;\n&#x27;</span>) <span class="comment">// \n</span></span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i &gt;= <span class="number">2</span> &amp;&amp; pStrOut[i<span class="number">-2</span>] == <span class="string">&#x27;\r&#x27;</span> &amp;&amp; c == <span class="string">&#x27;\n&#x27;</span>) <span class="comment">// \r\n</span></span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i == MaxLength) <span class="comment">// 超过最大长度</span></span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(Timeout &lt; <span class="number">0</span> || GetTick() &lt; expireTime); <span class="comment">// 判断是否超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在字符串末尾增加&#x27;\0&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(i == MaxLength)</span><br><span class="line">&#123;</span><br><span class="line">pStrOut[i<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pStrOut[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UART的HAL库">UART的HAL库</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_UART_RxCpltCallback(huartx); <span class="comment">// 当接受到UART数据时就会触发</span></span><br><span class="line">HAL_UART_Receive_IT(huartx, *pData, Size); <span class="comment">// </span></span><br><span class="line"><span class="built_in">memset</span>(*ptr, value, size) <span class="comment">// 设置一段内存的值</span></span><br></pre></td></tr></table></figure><p><strong>printf的重定向</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span>&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (uint_8*)&amp;ch, <span class="number">1</span>, <span class="number">10</span>);<span class="comment">//huart1需要根据你的配置修改</span></span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可变参数宏格式化日志</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USER_MAIN_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_printf(format, ...) printf( format <span class="string">&quot;\r\n&quot;</span>, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_info(format, ...) printf(<span class="string">&quot;[\tmain]info:&quot;</span> format <span class="string">&quot;\r\n&quot;</span>, ##</span></span><br><span class="line">__VA_ARGS__)</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_debug(format, ...) printf(<span class="string">&quot;[\tmain]debug:&quot;</span> format <span class="string">&quot;\r\n&quot;</span>, ##</span></span><br><span class="line">__VA_ARGS__)</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_error(format, ...) printf(<span class="string">&quot;[\tmain]error:&quot;</span> format <span class="string">&quot;\r\n&quot;</span>,##</span></span><br><span class="line">__VA_ARGS__)</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_printf(format, ...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_info(format, ...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_debug(format, ...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> user_main_error(format, ...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="USART的HAL配置">USART的HAL配置</h4><ol><li>异步收发模式</li><li>串口中断</li><li></li></ol><h3 id="AFIO">AFIO</h3><h4 id="简介-3">简介</h4><blockquote><p>开启重映射</p></blockquote><h4 id="使用">使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); <span class="comment">// 开启时钟</span></span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE); <span class="comment">// 开启引脚重映射</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="I2C">I2C</h3><h4 id="简介-4">简介</h4><blockquote><p>使用I2C是因为可以一个master对多个slave, 而USART是一对一</p></blockquote><h4 id="I2C电路结构">I2C电路结构</h4><p><img src="/img/I2C_struct.png" alt=""></p><p>SCL: 时钟线 主–&gt;从<br>SDA: 数据线 主&lt;-&gt;从</p><h4 id="I2C数据帧结构">I2C数据帧结构</h4><p><img src="../img/I2C_frame.png" alt=""><br>字节1: <code>Co/DC/....</code><br>Co: 1可以命令和数据间切换, 0不可以切换命令和数据<br>DC: 高位数据, 低位命令<br>起始位: 拉低电压<br>ACK: 应答信号<br>结束位: 拉高电压</p><h4 id="I2C引脚配置">I2C引脚配置</h4><p><img src="/img/I2C_IOconfig.png" alt=""></p><h4 id="I2C重映射">I2C重映射</h4><p><img src="/img/I2C_remap.png" alt=""></p><h4 id="I2C的传输速度-波特率">I2C的传输速度(波特率)</h4><ol><li>Sm &lt;=100kbps</li><li>Fm &lt;=400kbps</li></ol><h4 id="I2C的模式">I2C的模式</h4><ol><li>I2C</li><li>SMBus_device</li><li>SMBus_host</li></ol><h4 id="I2C时钟信号占空比">I2C时钟信号占空比</h4><blockquote><p>仅Sm快速模式才可以设置</p></blockquote><ol><li>2</li><li>16/9</li></ol><h4 id="I2C初始化">I2C初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 开启时钟, 复位I2C， 闭合I2C总开关</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);</span><br><span class="line">RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);</span><br><span class="line">RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);I2C_Cmd(I2C1, ENABLE);</span><br><span class="line"><span class="comment">// 重映射</span></span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_I2C1, ENABLE);</span><br><span class="line"><span class="comment">// 配置引脚</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_OD;</span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"><span class="comment">// 配置I2C参数</span></span><br><span class="line">I2C_InitTypeDef I2C_InitStruct;</span><br><span class="line">I2C_InitStruct.I2C_ClockSpeed = <span class="number">400000</span>;</span><br><span class="line">I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;</span><br><span class="line">I2C_InitStruct.I2C_Mode =I2C_Mode_I2C;</span><br><span class="line">I2C_Init(I2C1, &amp;I2C_InitStruct);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="I2C的标志位">I2C的标志位</h4><table><thead><tr><th>BUSY</th><th>总线忙</th></tr></thead><tbody><tr><td>SB</td><td>起始位成功</td></tr><tr><td>AF</td><td>应答失败</td></tr><tr><td>ADDR</td><td>寻址成功</td></tr><tr><td>TxE</td><td>发送寄存器为空</td></tr><tr><td>BTF</td><td>发送寄存器和移位寄存器为空</td></tr><tr><td>ACK</td><td>发送ACK(对于正在接受的字节)</td></tr><tr><td>STOP</td><td>发送停止位</td></tr></tbody></table><h4 id="I2C的操作">I2C的操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I2C_GetFlagStatus(I2Cx, I2C_FLAG); <span class="comment">// 得到标志位状态</span></span><br><span class="line">I2C_GenerateSTART(I2Cx, ENABLE); <span class="comment">// 产生开始位</span></span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE); <span class="comment">// 产生停止位</span></span><br><span class="line">I2C_ClearFlag(I2Cx, I2C_FLAG); <span class="comment">// 清理标志位</span></span><br><span class="line">I2C_SendData(I2Cx, data); <span class="comment">// 发送1个字节</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="I2C的常用封装函数">I2C的常用封装函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">weak <span class="type">int</span> <span class="title function_">My_I2C_SendBytes</span><span class="params">(I2C_TypeDef *I2Cx, <span class="type">uint8_t</span> Addr, <span class="type">const</span> <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// #1. 等待总线空闲</span></span><br><span class="line"><span class="keyword">while</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY) == SET);</span><br><span class="line"><span class="comment">// #2. 发送起始位</span></span><br><span class="line">I2C_GenerateSTART(I2Cx, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB) == RESET);</span><br><span class="line"><span class="comment">// #3. 寻址阶段</span></span><br><span class="line">I2C_ClearFlag(I2Cx, I2C_FLAG_AF);</span><br><span class="line">I2C_SendData(I2Cx, Addr &amp; <span class="number">0xfe</span>); <span class="comment">// 0xfe代表数据发送</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_ADDR) == SET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_AF) == SET)</span><br><span class="line">&#123;</span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 寻址失败</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清除ADDR</span></span><br><span class="line">I2C_ReadRegister(I2Cx, I2C_Register_SR1);</span><br><span class="line">I2C_ReadRegister(I2Cx, I2C_Register_SR2);</span><br><span class="line"><span class="comment">// #4. 发送数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint16_t</span> i=<span class="number">0</span>; i&lt;Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_AF) == SET)</span><br><span class="line">&#123;</span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>; <span class="comment">// 数据被拒收</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_TXE) == SET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">I2C_SendData(I2Cx, pData[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_AF) == SET)</span><br><span class="line">&#123;</span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>; <span class="comment">// 数据被拒收</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BTF) == SET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #5. 发送停止位</span></span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__weak <span class="type">int</span> <span class="title function_">My_I2C_ReceiveBytes</span><span class="params">(I2C_TypeDef *I2Cx, <span class="type">uint8_t</span> Addr, <span class="type">uint8_t</span> *pBuffer, <span class="type">uint16_t</span> Size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Size == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// #1. 等待总线空闲</span></span><br><span class="line"><span class="keyword">while</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY) == SET);</span><br><span class="line"><span class="comment">// #2. 发送起始位</span></span><br><span class="line">I2C_GenerateSTART(I2Cx, ENABLE);</span><br><span class="line"><span class="keyword">while</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_SB) == RESET);</span><br><span class="line"><span class="comment">// #3. 寻址阶段</span></span><br><span class="line">I2C_ClearFlag(I2Cx, I2C_FLAG_AF);</span><br><span class="line">I2C_SendData(I2Cx, Addr | <span class="number">0x01</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_ADDR) == SET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_AF) == SET)</span><br><span class="line">&#123;</span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 寻址失败</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #4. 数据读取</span></span><br><span class="line"><span class="keyword">if</span>(Size == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 向ACK写0</span></span><br><span class="line">I2C_AcknowledgeConfig(I2Cx, DISABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除ADDR</span></span><br><span class="line">__disable_irq();</span><br><span class="line">I2C_ReadRegister(I2Cx, I2C_Register_SR1);</span><br><span class="line">I2C_ReadRegister(I2Cx, I2C_Register_SR2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送停止位</span></span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE);</span><br><span class="line">__enable_irq();</span><br><span class="line"><span class="comment">// 等待RxNE置位</span></span><br><span class="line"><span class="keyword">while</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE) == RESET);</span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line">pBuffer[<span class="number">0</span>] = I2C_ReceiveData(I2Cx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 向ACK写1</span></span><br><span class="line">I2C_AcknowledgeConfig(I2Cx, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除ADDR</span></span><br><span class="line">I2C_ReadRegister(I2Cx, I2C_Register_SR1);</span><br><span class="line">I2C_ReadRegister(I2Cx, I2C_Register_SR2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint16_t</span> i=<span class="number">0</span>; i&lt;Size<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==Size<span class="number">-2</span>)</span><br><span class="line">&#123;</span><br><span class="line">__disable_irq();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待RxNE置位</span></span><br><span class="line"><span class="keyword">while</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE) == RESET);</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line">pBuffer[i] = I2C_ReceiveData(I2Cx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向ACK写0</span></span><br><span class="line">I2C_AcknowledgeConfig(I2Cx, DISABLE);</span><br><span class="line"><span class="comment">// 发送停止位</span></span><br><span class="line">I2C_GenerateSTOP(I2Cx, ENABLE);</span><br><span class="line"></span><br><span class="line">__enable_irq();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待RxNE置位</span></span><br><span class="line"><span class="keyword">while</span>(I2C_GetFlagStatus(I2Cx, I2C_FLAG_RXNE) == RESET);</span><br><span class="line">pBuffer[Size<span class="number">-1</span>] = I2C_ReceiveData(I2Cx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="软件I2C">软件I2C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">GPIO_TypeDef *SCL_GPIOx; <span class="comment">// SCL引脚的组编号</span></span><br><span class="line"><span class="type">uint16_t</span> SCL_GPIO_Pin;   <span class="comment">// SCL引脚的引脚编号</span></span><br><span class="line"></span><br><span class="line">GPIO_TypeDef *SDA_GPIOx; <span class="comment">// SDA引脚的组编号</span></span><br><span class="line"><span class="type">uint16_t</span> SDA_GPIO_Pin;   <span class="comment">// SDA引脚的引脚编号</span></span><br><span class="line"></span><br><span class="line">&#125; SI2C_TypeDef;</span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">My_SI2C_Init</span><span class="params">(SI2C_TypeDef *SI2C)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// #1. 使能SCL引脚的时钟</span></span><br><span class="line"><span class="keyword">if</span>(SI2C-&gt;SCL_GPIOx == GPIOA)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SI2C-&gt;SCL_GPIOx == GPIOB)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SI2C-&gt;SCL_GPIOx == GPIOC)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SI2C-&gt;SCL_GPIOx == GPIOD)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2. 对SCL和SDA写1</span></span><br><span class="line">GPIO_WriteBit(SI2C-&gt;SDA_GPIOx, SI2C-&gt;SDA_GPIO_Pin, Bit_SET);</span><br><span class="line">GPIO_WriteBit(SI2C-&gt;SCL_GPIOx, SI2C-&gt;SCL_GPIO_Pin, Bit_SET);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2. 使能SDA引脚的时钟</span></span><br><span class="line"><span class="keyword">if</span>(SI2C-&gt;SDA_GPIOx == GPIOA)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SI2C-&gt;SDA_GPIOx == GPIOB)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SI2C-&gt;SDA_GPIOx == GPIOC)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(SI2C-&gt;SDA_GPIOx == GPIOD)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3. 初始化SCL引脚为输出开漏</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = SI2C-&gt;SCL_GPIO_Pin;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;</span><br><span class="line">GPIO_Init(SI2C-&gt;SCL_GPIOx, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #4. 初始化SDA引脚为输出开漏</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = SI2C-&gt;SDA_GPIO_Pin;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;</span><br><span class="line">GPIO_Init(SI2C-&gt;SDA_GPIOx, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @简介：通过软件I2C向从机写入多个字节</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// @参数 I2Cx：填写要操作的I2C的名称，可以是I2C1或I2C2</span></span><br><span class="line"><span class="comment">// @参数 Addr：填写从机的地址，左对齐 - A6 A5 A4 A3 A2 A1 A0 0</span></span><br><span class="line"><span class="comment">// @参数 pData：要发送的数据（数组）</span></span><br><span class="line"><span class="comment">// @参数 Size：要发送的数据的数量，以字节为单位</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @返回值：0 - 发送成功， -1 - 寻址失败， -2 - 数据被拒收</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">__weak <span class="type">int</span> <span class="title function_">My_SI2C_SendBytes</span><span class="params">(SI2C_TypeDef *SI2C, <span class="type">uint8_t</span> Addr, <span class="type">const</span> <span class="type">uint8_t</span> *pData, <span class="type">uint16_t</span> Size)</span></span><br><span class="line">&#123;</span><br><span class="line">sda_w(<span class="number">1</span>);</span><br><span class="line">scl_w(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #1. 发送起始位</span></span><br><span class="line">sda_w(<span class="number">0</span>);</span><br><span class="line">delay(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2. 发送从机地址+RW</span></span><br><span class="line"><span class="keyword">if</span>(SendByte(SI2C, Addr &amp; <span class="number">0xfe</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">SendStop(SI2C);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 寻址失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3. 发送数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint16_t</span> i=<span class="number">0</span>; i&lt;Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(SendByte(SI2C, pData[i]) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">SendStop(SI2C);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>; <span class="comment">// 数据被拒收</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #4. 发送停止位</span></span><br><span class="line">SendStop(SI2C);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @简介：通过软件I2C从从机读多个字节</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// @参数 I2Cx：填写要操作的I2C的名称，可以是I2C1或I2C2</span></span><br><span class="line"><span class="comment">// @参数 Addr：填写从机的地址，左对齐 - A6 A5 A4 A3 A2 A1 A0 0</span></span><br><span class="line"><span class="comment">// @参数 pBuffer：接收缓冲区（数组）</span></span><br><span class="line"><span class="comment">// @参数 Size：要读取的数据的数量，以字节为单位</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @返回值：0 - 发送成功， -1 - 寻址失败</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">__weak <span class="type">int</span> <span class="title function_">My_SI2C_ReceiveBytes</span><span class="params">(SI2C_TypeDef *SI2C, <span class="type">uint8_t</span> Addr, <span class="type">uint8_t</span> *pBuffer, <span class="type">uint16_t</span> Size)</span></span><br><span class="line">&#123;</span><br><span class="line">sda_w(<span class="number">1</span>);</span><br><span class="line">scl_w(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #1. 发送起始位</span></span><br><span class="line">sda_w(<span class="number">0</span>);</span><br><span class="line">delay(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2. 发送从机地址+RW</span></span><br><span class="line"><span class="keyword">if</span>(SendByte(SI2C, Addr | <span class="number">0x01</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">SendStop(SI2C);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 寻址失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3. 接收</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint16_t</span> i=<span class="number">0</span>; i&lt;Size; i++)</span><br><span class="line">&#123;</span><br><span class="line">pBuffer[i] = ReceiveByte(SI2C, (i==Size<span class="number">-1</span>) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #4. 发送停止位</span></span><br><span class="line">SendStop(SI2C);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @简介：发送一个字节</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @返回值：0-ACK，其它-NAK</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">SendByte</span><span class="params">(SI2C_TypeDef *SI2C, <span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int8_t</span> i=<span class="number">7</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">scl_w(<span class="number">0</span>); <span class="comment">// 将SCL拉低</span></span><br><span class="line">sda_w((Byte &amp; (<span class="number">0x01</span>&lt;&lt;i)) ? <span class="number">1</span> : <span class="number">0</span>); <span class="comment">// 变SDA的电压</span></span><br><span class="line">delay(<span class="number">2</span>); <span class="comment">// 延迟1/2周期</span></span><br><span class="line"></span><br><span class="line">scl_w(<span class="number">1</span>); <span class="comment">// 将SCL拉高</span></span><br><span class="line">delay(<span class="number">2</span>); <span class="comment">// 延迟1/2周期</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取ACK</span></span><br><span class="line">scl_w(<span class="number">0</span>); <span class="comment">// 将SCL拉低</span></span><br><span class="line">sda_w(<span class="number">1</span>); <span class="comment">// 将SDA释放</span></span><br><span class="line">delay(<span class="number">2</span>); <span class="comment">// 延迟1/4周期</span></span><br><span class="line"></span><br><span class="line">scl_w(<span class="number">1</span>); <span class="comment">// 将SCL拉高</span></span><br><span class="line">delay(<span class="number">2</span>); <span class="comment">// 延迟1/4周期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sda_r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @简介：发送停止位</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">SendStop</span><span class="params">(SI2C_TypeDef *SI2C)</span></span><br><span class="line">&#123;</span><br><span class="line">scl_w(<span class="number">0</span>); <span class="comment">// scl拉低</span></span><br><span class="line">delay(<span class="number">1</span>); <span class="comment">// 延迟1/4周期</span></span><br><span class="line">sda_w(<span class="number">0</span>); <span class="comment">// sda拉低</span></span><br><span class="line">delay(<span class="number">1</span>); <span class="comment">// 延迟1/4周期</span></span><br><span class="line">scl_w(<span class="number">1</span>); <span class="comment">// scl拉高</span></span><br><span class="line">delay(<span class="number">1</span>); <span class="comment">// 延迟1/4周期</span></span><br><span class="line">sda_w(<span class="number">1</span>); <span class="comment">// sda拉高</span></span><br><span class="line">delay(<span class="number">1</span>); <span class="comment">// 延迟1/4周期</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @简介：从从机读取一个字节的数据</span></span><br><span class="line"><span class="comment">// @参数 Ack：0 - 回NAK，1 - 回ACK</span></span><br><span class="line"><span class="comment">// @返回值：读取到的数据</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">ReceiveByte</span><span class="params">(SI2C_TypeDef *SI2C, <span class="type">uint8_t</span> Ack)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int8_t</span> i=<span class="number">7</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">scl_w(<span class="number">0</span>); <span class="comment">// scl拉低</span></span><br><span class="line">sda_w(<span class="number">1</span>); <span class="comment">// 释放SDA</span></span><br><span class="line">delay(<span class="number">2</span>); <span class="comment">// 延迟1/2周期</span></span><br><span class="line">scl_w(<span class="number">1</span>); <span class="comment">// scl拉高</span></span><br><span class="line">delay(<span class="number">2</span>); <span class="comment">// 延迟1/2周期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sda_r) <span class="comment">// 如果读到的比特位为1</span></span><br><span class="line">&#123;</span><br><span class="line">ret |= <span class="number">0x01</span> &lt;&lt; i; <span class="comment">// 写入比特位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 如果读到的比特位为0</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 什么也不干</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回复ACK或NAK</span></span><br><span class="line"></span><br><span class="line">scl_w(<span class="number">0</span>); <span class="comment">// scl拉低</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Ack)</span><br><span class="line">&#123;</span><br><span class="line">sda_w(<span class="number">0</span>); <span class="comment">// sda拉低</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sda_w(<span class="number">1</span>); <span class="comment">// sda拉高</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delay(<span class="number">2</span>); <span class="comment">// 延迟1/2周期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SPI">SPI</h3><h4 id="简介-5">简介</h4><p>SPI的速度比I2C更快, 且通信模式是全双工(可以同时双向传输)</p><h4 id="SPI的结构">SPI的结构</h4><p><img src="/img/SPI_struct.png" alt=""></p><h4 id="SPI的重映射">SPI的重映射</h4><p><img src="/img/SPI_remap.png" alt=""></p><h4 id="SPI的引脚配置">SPI的引脚配置</h4><p><img src="/img/SPI_IOconfig.png" alt=""></p><h4 id="SPI的时钟信号">SPI的时钟信号</h4><p><img src="/img/SPI_CLK.png" alt=""></p><h4 id="SPI的比特位传输顺序">SPI的比特位传输顺序</h4><p>|LSB_first|先传最低有效位|<br>|MSB_first|先传最高有效位</p><h4 id="SPI的数据宽度">SPI的数据宽度</h4><ol><li>8 bit</li><li>16 bit</li></ol><h4 id="SPI的通信方向">SPI的通信方向</h4><ol><li>2线全双工</li><li>2线只读</li><li>单线接受</li><li>单线发送</li></ol><h4 id="SPI的模式">SPI的模式</h4><ol><li>Master</li><li>Slaver</li></ol><h4 id="SPI的波特率">SPI的波特率</h4><p>72 MHz / 64 = 1.125M</p><h4 id="SPI的NSS">SPI的NSS</h4><ol><li>硬件NSS</li><li>软件NSS 用电脑写值</li></ol><h4 id="SPI的初始化">SPI的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SPI1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"><span class="comment">// 初始化引脚</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;</span><br><span class="line">GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz; <span class="comment">// SCK</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line">GPIO_InitStruct.GPIO_Mode =GPIO_Mode_IPU;</span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStruct); <span class="comment">// MISO</span></span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_OD;</span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStruct); <span class="comment">// MOSI</span></span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStruct); <span class="comment">// 普通IO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化SPI</span></span><br><span class="line">SPI_InitTypeDef SPI_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">SPI_InitStruct.SPI_Mode = SPI_Mode_Master;</span><br><span class="line">SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;</span><br><span class="line">SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;</span><br><span class="line">SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;</span><br><span class="line">SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;</span><br><span class="line">SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;</span><br><span class="line">SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;</span><br><span class="line">SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line"></span><br><span class="line">SPI_Init(SPI1, &amp;SPI_InitStruct);</span><br><span class="line"></span><br><span class="line">SPI_NSSInternalSoftwareConfig(SPI1, SPI_NSSInternalSoft_Set); <span class="comment">// 给NSS接高电压</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="SPI的封装函数">SPI的封装函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_SPI_MasterTransmitReceive</span><span class="params">(SPI_TypeDef *SPIx, <span class="type">const</span> <span class="type">uint8_t</span> *pDataTx, <span class="type">uint8_t</span> *pDataRx, <span class="type">uint16_t</span> Size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Size == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #1. 闭合总开关</span></span><br><span class="line">SPI_Cmd(SPIx, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2. 写入第一个字节</span></span><br><span class="line">SPI_I2S_SendData(SPIx, pDataTx[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3. 读写Size-1个字节</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uint16_t</span> i=<span class="number">0</span>; i&lt;Size<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 向TDR写数据</span></span><br><span class="line"><span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line">SPI_I2S_SendData(SPIx, pDataTx[i+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从RDR读数据</span></span><br><span class="line"><span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);</span><br><span class="line"></span><br><span class="line">pDataRx[i] = SPI_I2S_ReceiveData(SPIx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #4. 读取最后一个字节</span></span><br><span class="line"><span class="keyword">while</span>(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);</span><br><span class="line"></span><br><span class="line">pDataRx[Size<span class="number">-1</span>] = SPI_I2S_ReceiveData(SPIx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #5. 断开总开关</span></span><br><span class="line">SPI_Cmd(SPIx, DISABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="EXTI">EXTI</h3><h4 id="简介-6">简介</h4><blockquote><p>检测GPIO引脚的电压变化(上升沿/下降沿), 产生中断</p></blockquote><h4 id="线">线</h4><p>EXTI线(共16+4条)对GPIOx的电压变化的捕获,从而产生中断</p><blockquote><p>注意EXTI线5只能处理PA5, PB5, PC5, PD5…</p></blockquote><h4 id="EXTI的初始化">EXTI的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_EXTIInit</span><span class="params">()</span>&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">GPIO_EXTILineConfig(GPIO_PortSource, GPIO_PinSource); <span class="comment">// 分配线的IO引脚</span></span><br><span class="line">EXTI_InitTypeDef EXTI_InitStruct = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">EXTI_InitStruct.EXTI_Line = EXTI_Line5; <span class="comment">// EXTI线5</span></span><br><span class="line">EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt; <span class="comment">// 中断事件</span></span><br><span class="line">EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising <span class="comment">// 检测上升沿/下降沿/双边沿</span></span><br><span class="line">EXTI_InitStruct.EXTI_LineCmd = ENABLE; <span class="comment">// 线的闭合或断开</span></span><br><span class="line">EXTI_Init(&amp;EXTI_InitStruct); <span class="comment">// 初始化一条EXTI线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NVIC的配置</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup2);</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannel = EXTI_9_5_IRQn; <span class="comment">// 中断通道</span></span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">// 优先级</span></span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannelSubPriority = <span class="number">0</span>; <span class="comment">// 子优先级</span></span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE; <span class="comment">// 开关</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写中断函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI_9_5_IRQHandler</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (EXTI_GetFlagStatus(EXTI_Line5) == SET)&#123;</span><br><span class="line">EXTI_ClearFlag(EXTI_Line5);</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (EXTI_GetFlagStatus(EXTI_Line6) == SET)&#123;</span><br><span class="line">EXTI_ClearFlag(EXTI_Line6);</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TIM">TIM</h3><h4 id="TIM的重映射">TIM的重映射</h4><p><img src="/img/TIM_remap.png" alt=""></p><h4 id="时基单元">时基单元</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">TIM_TimeBaseInitStruct.TIM_Prescaler = <span class="number">71</span>; <span class="comment">// 1MHZ</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class="line">TIM_TimeBaseInitStruct.TIM_Period = <span class="number">999</span>; <span class="comment">// 1KHz</span></span><br><span class="line">TIM_TimeBaseInitStruct.TIM_RepetitionCounter = <span class="number">0</span>;</span><br><span class="line">TIM_ARRPreloadConfig(TIMx, ENABLE); <span class="comment">// 打开ARR预加载</span></span><br><span class="line">TIM_TimeBaseInit(TIMx, &amp;TIM_TimeBaseInitStruct);</span><br><span class="line">TIM_Cmd(TIMx, ENABLE); <span class="comment">// 时基单元打开</span></span><br></pre></td></tr></table></figure><ol><li><code>TIM_Prescaler</code>预分频器的值, 72 / (预分频+1)</li><li><code>TIM_CounterMode</code>计数方式, 一般选UP</li><li><code>TIM_Period</code>计数周期, 每计数(计数周期+1) * (重复计数次数+1), 输出update事件</li><li><code>TIM_RepetitionCounter</code>重复计数次数, 一般设为0</li><li><code>TIM_ARRPreloadConfig</code>最好打开</li><li><code>TIM_Cmd</code>时基单元总开关</li></ol><h4 id="输出比较">输出比较</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TIM_OCInitTypeDef TIM_OCInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1; <span class="comment">// </span></span><br><span class="line">TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;</span><br><span class="line">TIM_OCInitStruct.TIM_OutputState = ENABLE;</span><br><span class="line">TIM_OCInitStruct.TIM_Pulse = <span class="number">0</span>;</span><br><span class="line">TIM_OC1Init(TIMx, &amp;TIM_OCInitStruct);</span><br><span class="line">TIM_CtrlPWMOutputs(TIMx, ENABLE); <span class="comment">// 打开OC总开关</span></span><br><span class="line">TIM_CCPreloadControl(TIMx, ENABLE); <span class="comment">// 使能cc预加载</span></span><br><span class="line">TIM_SetCompare1(TIMx, <span class="number">23999</span>);</span><br></pre></td></tr></table></figure><ol><li><code>TIM_OCMode</code>输出比较模式, 设置为PWM1, 当cnt <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span></span></span></span> ccr 输出高电压<br>,当cnt &gt; ccr 输出低电压.</li><li><code>TIM_OCPolarity</code>输出比较极性, 是否对输出的信号取反.</li><li><code>TIM_OutputState</code>使能OC的通道</li><li><code>TIM_Pulse</code>ccr的值</li><li><code>TIM_CtrlPWMOutputs</code>打开OC的总开关</li><li><code>TIM_CCPreloadControl</code> 开启cc的预加载</li><li><code>TIM_SetCompare1</code> 设置cc1的值, cc/cnt就是占空比(ccr是寄存器)</li></ol><h4 id="输入捕获">输入捕获</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TIM_ICInitTypeDef TIM_ICInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;</span><br><span class="line">TIM_ICInitStruct.TIM_ICFilter = <span class="number">0</span>;</span><br><span class="line">TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;</span><br><span class="line">TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1; <span class="comment">// 分频器</span></span><br><span class="line">TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI; <span class="comment">// 直接?间接</span></span><br><span class="line">TIM_ICInit(TIM4, &amp;TIM_ICInitStruct);</span><br><span class="line">TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;</span><br><span class="line">TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;</span><br><span class="line">TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_IndirectTI;</span><br><span class="line">TIM_ICInit(TIM4, &amp;TIM_ICInitStruct);</span><br></pre></td></tr></table></figure><ol><li><code>TIM_Channel</code>输入捕获的通道(根据引脚)</li><li><code>TIM_ICFilter</code>输入捕获过滤器</li><li><code>TIM_ICPolarity</code>捕获上升沿/下降沿</li><li><code>TIM_ICPrescaler</code>是否分频</li><li><code>TIM_ICSelection</code>直接或间接输入?</li></ol><blockquote><p>对于第五点, 加入channel2选择间接输入,那么channel2的输入信号实际上是channel1的输入信号<br>类似的， 1&lt;–&gt;2, 3&lt;–&gt;4可以利用间接输入获取宁一个通道上的信号</p></blockquote><h4 id="从模式器">从模式器</h4><blockquote><p>从模式: 通过TRGI的信号对时基单元进行控制</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIM_SelectInputTrigger(TIM1,TIM_TS_TI1FP1); <span class="comment">// 选择 TRGI的来源</span></span><br><span class="line">TIM_SelectSlaveMode(TIM1, TIM_SlaveMode_Reset); <span class="comment">// 复位模式</span></span><br></pre></td></tr></table></figure><ol><li><code>TIM_SelectInputTrigger</code>选择TRGI</li><li><code>TIM_SelectSlaveMode</code>选择从模式</li></ol><table><thead><tr><th>TRGI输入来源</th><th>解释</th></tr></thead><tbody><tr><td>TIM_TS_ITRx</td><td>其他定时器的TRGO</td></tr><tr><td>TIM_TS_TI1F_ED</td><td>输入捕获通道1滤波边沿检测</td></tr><tr><td>TIM_TS_TI1FP1</td><td>输入捕获通道1滤波1</td></tr><tr><td>TIM_TS_TI1FP2</td><td>输入捕获通道2滤波2</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><table><thead><tr><th>从模式</th><th>解释</th></tr></thead><tbody><tr><td>Reset</td><td>TRGI上升沿,清零cnt</td></tr><tr><td>Gated</td><td>TRGI高电压, 关闭时基单元;低电压, 开启时基单元</td></tr><tr><td>Trigger</td><td>TRGI上升沿, 开启时基单元</td></tr><tr><td>Externall</td><td>TRGI作为时基单元的时钟来源</td></tr></tbody></table><table><thead><tr><th>主模式</th><th>解释</th></tr></thead><tbody><tr><td>Enable</td><td>时基单元打开, TRGO输出1; 反之TRGO输出0</td></tr><tr><td>Update</td><td>每次update, TRGO输出脉冲</td></tr></tbody></table><h4 id="TIM的中断-HAL库">TIM的中断(HAL库)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_Base_Start_IT(&amp;htim1); <span class="comment">// 使能TIM1的中断</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim2); <span class="comment">// 使能TIM2的中断</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (htim-&gt;Instance == htim1.Instance) &#123;</span><br><span class="line">...<span class="comment">//定时器1中断业务</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(htim-&gt; Instance == htim2.Instance) &#123;</span><br><span class="line">...<span class="comment">//定时器2中断业务</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line"><span class="comment">// 使能timx的通道y</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htimx,TIM_CHANNEL_y);</span><br><span class="line"><span class="comment">// 修改timx的通道y的pwm的ccr为z，即修改占空比</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htimx, TIM_CHANNEL_y, z);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="TIM生成PWM-SPWM-HAL库">TIM生成PWM/SPWM(HAL库)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使能timx的通道y</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htimx,TIM_CHANNEL_y);</span><br><span class="line"><span class="comment">// 修改timx的通道y的pwm比较值为z，即修改占空比</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htimx, TIM_CHANNEL_y, z);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ADC">ADC</h3><blockquote><p>模拟信号转换成数字信号<br>ADC1, ADC2都是12位逐次逼近型(精度是3.3v / (2^12)</p></blockquote><h4 id="ADC的初始化">ADC的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_ADC_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 开启时钟并闭合ADC总开关</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line">ADC_Cmd(ADC1, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化引脚</span></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AIN; <span class="comment">// 模拟输入  </span></span><br><span class="line">GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置ADC时钟信号</span></span><br><span class="line">RCC_ADCCLKConfig(RCC_PCLK2_Div6); <span class="comment">// 12MHz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置ADC基础参数</span></span><br><span class="line">ADC_InitTypeDef ADC_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">ADC_InitStruct.ADC_ContinuousConvMode = DISABLE; <span class="comment">// 连续模式</span></span><br><span class="line">ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right; <span class="comment">// 右对齐</span></span><br><span class="line">ADC_InitStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; <span class="comment">// 软件启动</span></span><br><span class="line">ADC_InitStruct.ADC_Mode = ADC_Mode_Independent; <span class="comment">// 独立模式</span></span><br><span class="line">ADC_InitStruct.ADC_NbrOfChannel = <span class="number">1</span>; <span class="comment">// 常规通道数</span></span><br><span class="line">ADC_InitStruct.ADC_ScanConvMode = DISABLE; <span class="comment">// 关闭扫描模式</span></span><br><span class="line"></span><br><span class="line">ADC_Init(ADC1, &amp;ADC_InitStruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置常规序列</span></span><br><span class="line">ADC_RegularChannelConfig(ADC1, ADC_Channel_0, <span class="number">1</span>, ADC_SampleTime_13Cycles5); <span class="comment">// 10.24</span></span><br><span class="line">ADC_ExternalTrigConvCmd(ADC1, ENABLE); <span class="comment">// 总开关</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ADC的使用">ADC的使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ADC_ClearFlag(ADC1, ADC_FLAG_EOC); <span class="comment">// 清空EOC标志位</span></span><br><span class="line">ADC_SoftwareStartConvCmd(ADC1, ENABLE); <span class="comment">// 通过软件启动发送脉冲</span></span><br><span class="line"><span class="keyword">while</span>(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);</span><br><span class="line"><span class="type">uint16_t</span> dr = ADC_GetConversionValue(ADC1); <span class="comment">// 获得转换结果</span></span><br><span class="line"><span class="type">float</span> voltage = dr * (<span class="number">3.3f</span> / <span class="number">4095</span>);<span class="comment">// 电压 = dr * (3.3 / 2 ^ 12 - 1)</span></span><br><span class="line"><span class="keyword">if</span> (voltage &gt; <span class="number">1.5</span>)&#123; <span class="comment">// </span></span><br><span class="line">GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET); <span class="comment">// 光线弱，灭</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET); <span class="comment">// 光线强，亮</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ADC的多路复用">ADC的多路复用</h4><p>1个ADC同时转换多路信号</p><h4 id="ADC的常规序列">ADC的常规序列</h4><ol><li>最多存在16个任务(对每个通道的信号转换)</li><li>可以将TIM3_TRGO(设为update, 1ms一次)作为常规序列的触发器,那么每1ms做一次常规序列</li></ol><h4 id="ADC的注入序列">ADC的注入序列</h4><ol><li>最多存在4个任务</li><li>有单独的结果寄存器,</li><li>优先级更高</li></ol><h2 id="应用">应用</h2><h3 id="矩阵键盘">矩阵键盘</h3><p>4x4键盘<br>行: 输出引脚(PB12~15)<br>列: 输入引脚(PA8~11)<br>工作原理: 循环扫描: 一条行线发送扫描信号, 四条列线扫描按键是否被按下<br><img src="/img/jzjp.png" alt=""><br>依次将每条行线设置为低电平, 然后检测列线, 如果按键被按下, 列线会==检测到低电平==, 故行线应设置为OUT__PP, 列线应设置为IPU.如果没有列线会低电平, 那么把该行线重新设置成高电平</p><h3 id="OLED">OLED</h3><ol><li>通信协议: I2C/ SPI</li><li>传输速度: SPI &gt; I2C</li></ol><h4 id="四针脚">四针脚</h4><blockquote><p>通信协议是: I2C</p></blockquote><table><thead><tr><th>SCL</th><th>Out_OD</th></tr></thead><tbody><tr><td>SDA</td><td>Out_OD</td></tr><tr><td>GND</td><td>GND</td></tr><tr><td>VCC</td><td>VCC</td></tr></tbody></table><h4 id="七针脚">七针脚</h4><blockquote><p>通信协议是: 4线SPI</p></blockquote><table><thead><tr><th>OLED</th><th>STM32</th></tr></thead><tbody><tr><td>VCC</td><td>3.3V</td></tr><tr><td>GND</td><td>GND</td></tr><tr><td>DO</td><td>SCL</td></tr><tr><td>DI</td><td>SDA(先传高位)</td></tr><tr><td>RES</td><td>reset</td></tr><tr><td>DC</td><td>置高发送数据, 置低发送命令</td></tr><tr><td>CS</td><td>片选,接低电平,代表始终选中芯片</td></tr></tbody></table><h4 id="OLED介绍">OLED介绍</h4><p>像素点 : 128 x 64<br>存储器(GDDRAM) : 128 x 8Bytes, 也就是每8行为一个字节<br>写命令: 配置页地址, 列地址<br>写数据: …</p><h4 id="命令表">命令表</h4><p><a href="https://www.sino-lcd.com/upload/default/20230406/aefc7a63e34602977c420ff86162ef55.pdf">SSD1306数据手册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本人花费5天时间完成了stm32的基础, 小累, 现在总结一下&lt;/p&gt;
&lt;h2 id=&quot;总述&quot;&gt;总述&lt;/h2&gt;
&lt;div class=&quot;mermaid-wrap&quot;&gt;&lt;pre class=&quot;mermaid-src&quot; hidden&gt;
    mindmap
    STM32[</summary>
      
    
    
    
    
    <category term="嵌入式" scheme="http://qingw.zxy/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP笔记</title>
    <link href="http://qingw.zxy/2025/02/09/CSAPP%E7%AC%94%E8%AE%B0/"/>
    <id>http://qingw.zxy/2025/02/09/CSAPP%E7%AC%94%E8%AE%B0/</id>
    <published>2025-02-09T08:40:01.548Z</published>
    <updated>2025-03-09T09:27:00.502Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hansimov.gitbook.io/csapp">出门左拐, 互联网万千世界</a></p><h2 id="处理器体系结构">处理器体系结构</h2><h3 id="指令集架构">指令集架构</h3><table><thead><tr><th>x86</th><th>ARM</th></tr></thead><tbody><tr><td>Intel AMD</td><td>手机,平板</td></tr><tr><td>CISC(复杂指令集)</td><td>RISC(精简指令集)</td></tr></tbody></table><h3 id="Y86架构">Y86架构</h3><p>详细见书介绍</p><h4 id="简介">简介</h4><p><strong>组成</strong></p><p>8个寄存器(%eax,%ecx,%edx,%ebx,%esi,%edi,%esp,%ebp),三个标志位(ZF,OF,SF),一个程序计数器(PC),一个内存</p><p><strong>指令集结构</strong></p><p>0~5个字节,每个字节由2个十六进制数字表达</p><table><thead><tr><th>位置</th><th>作用</th></tr></thead><tbody><tr><td>0(第一位代码部分,第2位功能部分)</td><td>指令类型</td></tr><tr><td>1</td><td>操作的寄存器</td></tr><tr><td>2~5</td><td>偏移量,值</td></tr></tbody></table><table><thead><tr><th>大体指令</th><th>数字</th></tr></thead><tbody><tr><td><code>nop</code></td><td>0</td></tr><tr><td><code>halt</code></td><td>1</td></tr><tr><td><code>mov</code></td><td>2,3,4,5</td></tr><tr><td><code>OPl</code></td><td>6</td></tr><tr><td><code>jxx</code></td><td>7</td></tr><tr><td><code>call</code></td><td>8</td></tr><tr><td><code>ret</code></td><td>9</td></tr><tr><td><code>push</code></td><td>A</td></tr><tr><td><code>pop</code></td><td>B</td></tr></tbody></table><blockquote><p>Tips:</p><ol><li>内存之间的传送必须要靠寄存器;</li><li>内存不能存储立即数</li><li>OPl 指add,sub,and,xor</li><li>halt 停止指令的执行(x86是hlt)</li></ol></blockquote><h3 id="逻辑设计和硬件控制语言HCL">逻辑设计和硬件控制语言HCL</h3><h4 id="逻辑门">逻辑门</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e9602d66055728a01ec413c45306cd85.png" alt=""></p><h4 id="组合电路-计算块">组合电路(计算块)</h4><p>解释: 多个逻辑门的组合如xor</p><p>多路复用器电路(根据控制信号来选出使用的电路)用情况表达式来描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int Out =[</span><br><span class="line">    case1: value1;</span><br><span class="line">    case2: value2;</span><br><span class="line">    1: defalut;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>ALU(算数/逻辑单元)就是一种组合电路</p></blockquote><h4 id="存储器和时钟控制">存储器和时钟控制</h4><table><thead><tr><th>硬件寄存器</th><th>存储单个字或位</th></tr></thead><tbody><tr><td>程序寄存器</td><td>寄存器文件,%eax…</td></tr></tbody></table><blockquote><p>此处作者没咋理解…</p></blockquote><h3 id="Y86的顺序实现">Y86的顺序实现</h3><h4 id="流水线-SEQ">流水线(SEQ)</h4><p>一条指令包括6个操作:</p><ol><li>取指: 读入指令(第0个字节),计算下一条指令的地址</li><li>解码: 读入指定的寄存器</li><li>执行: 执行指令</li><li>访存: 访问内存</li><li>写回: 写回寄存器</li><li>更新PC: 将下一条指令地址更新</li></ol><h4 id="SEQ的时序">SEQ的时序</h4><blockquote><p>看不懂QAQ</p></blockquote><h2 id="优化程序性能">优化程序性能</h2><blockquote><p>浮点数乘法损耗性能较大</p></blockquote><h3 id="优化编译器">优化编译器</h3><blockquote><p>通过 -O 来优化会有一定的局限性, 会出现&quot;存储器别名使用&quot;—编译器必须假设指针指向的位置不同, “认为函数有副作用”</p></blockquote><h3 id="表示程序性能">表示程序性能</h3><blockquote><p>CPE(cycle per element)</p></blockquote><h3 id="循环优化">循环优化</h3><ol><li>代码移动: 将计算结果不会改变的放在循环体外的局部变量</li><li>函数调用: 循环体里尽量不要函数调用(会损坏一定的封装性)</li><li>指针引用: 循环体中减少指针的解引用,可以在循环体外用局部变量储存值</li></ol><h3 id="理解现代处理器">理解现代处理器</h3><p><img src="/img/image.png" alt=""></p><blockquote><p>超标量乱序执行计数:</p><ol><li>汇编代码上: 好像是一次执行一个指令</li><li>实际上: 是同时对多条指令进行流水线操作的</li></ol></blockquote><blockquote><p>遇到了分支有三种处理方式: 1.选择分支 2.分支预测 3.两个都要<br>了解算术操作的执行时间和发射时间, 发现除法(38)和浮点数乘法的性能损耗(5)大<br>循环展开</p></blockquote><p>单指令多操作寄存器</p><table><thead><tr><th>%xmm</th><th>128位</th></tr></thead><tbody><tr><td>%ymm</td><td>256位</td></tr><tr><td>%zmm</td><td>512位</td></tr></tbody></table><h2 id="存储器层次结构">存储器层次结构</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hansimov.gitbook.io/csapp&quot;&gt;出门左拐, 互联网万千世界&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;处理器体系结构&quot;&gt;处理器体系结构&lt;/h2&gt;
&lt;h3 id=&quot;指令集架构&quot;&gt;指令集架构&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mermaid入门</title>
    <link href="http://qingw.zxy/2025/02/08/mermaid%E5%85%A5%E9%97%A8/"/>
    <id>http://qingw.zxy/2025/02/08/mermaid%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-08T09:01:44.631Z</published>
    <updated>2025-02-27T12:52:02.843Z</updated>
    
    <content type="html"><![CDATA[<h1>流程图</h1><h2 id="举例">举例</h2><pre class="mermaid">---title: Node---flowchart LR    i1(你好)    i2[混合]    i3([This ❤ Unicode])    i4[["`**markdown**`"]]    i5[("`Line1    Line2    `")]    A@{ shape: manual-file, label: "File Handling"}    i1-->i2    i1-.->|你好|i4    subgraph one    a1-->a2    end</pre><h2 id="注释">注释</h2><p>以%%开始的文字会被忽略</p><h2 id="大体格式">大体格式</h2><pre class="mermaid">---title: 我是标题 %% title处写标题---flowchart TB %% flowchart代表流程图, TB代表(箭头)方向top->bottom类似的BT,RL,LR    i1[文本] %% 创建一个带有文本的节点,它的编号是i1    i2[文本] %% 创建一个带有文本的节点,它的编号是i2    i1 --> i2 %% i1 指向 i2     i3["`markdown语法`"] %% 被"``"包裹可以写markdown语法</pre><h2 id="节点形状">节点形状</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[] 方形</span><br><span class="line">() 圆边</span><br><span class="line">([]) 体育场形</span><br><span class="line">[[]] 子程序形</span><br><span class="line">[()] 圆柱体形</span><br><span class="line">(()) 圆形</span><br><span class="line">&gt;] 特殊形状</span><br><span class="line">&#123;&#125; 菱形</span><br><span class="line">&#123;&#123;&#125;&#125; 六边形</span><br><span class="line">[//] 平行四边形</span><br><span class="line">[\\] 平行四边形</span><br><span class="line">[/\] 梯形</span><br><span class="line">[\/] 梯形</span><br><span class="line">((())) 双圈</span><br></pre></td></tr></table></figure><h3 id="扩展节点形状">扩展节点形状</h3><ul><li>格式: <code>i1@&#123;shape: rect, label: &quot;文本&quot;&#125;</code></li><li><a href="https://mermaid.js.org/syntax/flowchart.html">具体见此处</a></li></ul><h3 id="自定义节点">自定义节点</h3><ul><li>格式: <code>i1@&#123;icon: &quot;fa:user&quot;, form: &quot;square&quot;, label: &quot;文本&quot;&#125;</code><br><img src="/img/dsds.png" alt=""></li></ul><h2 id="箭头形状">箭头形状</h2><ul><li><code>i1--&gt;i2</code></li><li><code>i1--&gt;|text|i2</code> 带文字</li><li><code>i1-.-&gt;i2</code> 虚线</li><li><code>i1-.-&gt;|text|i2</code> 虚线带文字</li><li><code>i1==&gt;i2</code> 加粗</li><li><code>i1&lt;--&gt;i2</code> 双向箭头</li><li><code>i1--o i2</code></li><li><code>i1--x i2</code></li></ul><blockquote><p>Tips: —越多箭头越长, 可以在一行操作多个节点: <code>i1--&gt;i2 &amp; i1--&gt;i3</code></p></blockquote><h2 id="子图">子图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subgraph id [title]</span><br><span class="line">direction TB</span><br><span class="line">...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>子图也可以互相指向</li></ul><h2 id="对fontawesome的支持">对<a href="https://fontawesome.com/icons?from=io">fontawesome</a>的支持**</h2><ul><li>例如: <code>i1[&quot;fa:fa-twitter &quot;]</code></li></ul><blockquote><p>Warning:<br>单词“end”，请将整个单词或任意字母大写(例如“End”或“END”)全部以小写字母输入“end”将破坏流程图.<br>如果使用字母“o”或“x”作为连接流程图节点的首字母，请在字母前添加空格或将字母大写（例如，“dev— ops”、“dev—Ops”）.<br>输入“A—oB”将创建一个圆形边缘.输入“A—xB”将创建一个十字边</p></blockquote><h1>思维导图</h1><h2 id="举例-2">举例</h2><pre class="mermaid">mindmap    ROOT[根]        A[分支1]            B[分支1.1]            ::icon(fa fa-book)            C[分支1.2]        a[分支2]            b[分支2.1]            c[分支2.2]</pre><blockquote><p>作者认为结合代码和图像就可以看清楚结构了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;流程图&lt;/h1&gt;
&lt;h2 id=&quot;举例&quot;&gt;举例&lt;/h2&gt;
&lt;pre class=&quot;mermaid&quot;&gt;---
title: Node
---
flowchart LR
    i1(你好)
    i2[混合]
    i3([This ❤ Unicode])
    i4</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git入门</title>
    <link href="http://qingw.zxy/2025/02/08/git%E5%85%A5%E9%97%A8/"/>
    <id>http://qingw.zxy/2025/02/08/git%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-08T08:28:23.894Z</published>
    <updated>2025-02-08T15:21:57.765Z</updated>
    
    <content type="html"><![CDATA[<h1>Git介绍</h1><blockquote><p>免费开源,<em>分布式</em><strong>版本控制</strong>系统</p></blockquote><ul><li>分布式: 每台电脑都有自己的版本控制</li></ul><pre class="mermaid">---title: 工作流程---flowchart BT    i1[工作区]    i2[暂存区]    i3[本地库]    i4[远程库]    i1 -->|git add| i2    i2 -->|git commit| i3    i3 -->|git push| i4</pre><h2 id="常用命令">常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git config --global user.name 用户名</code></td><td>设置用户名</td></tr><tr><td><code>git config --global user.email 邮箱</code></td><td>设置用户邮箱</td></tr><tr><td><code>git init</code></td><td>初始化本地库</td></tr><tr><td><code>git status</code></td><td>查看本地库状态</td></tr><tr><td><code>git add 文件名</code></td><td>添加到暂存区</td></tr><tr><td><code>git rm --cacher &lt;file&gt;</code></td><td>从暂存区移除</td></tr><tr><td><code>git commit -m &quot;版本介绍&quot; 文件</code></td><td>提交版本</td></tr><tr><td><code>git log --all --graph --decorate</code></td><td>查看版本信息</td></tr><tr><td><code>git reset --hard 版本号</code></td><td>版本穿梭</td></tr></tbody></table><ul><li>用户名在<code>~/.gitconfig</code></li></ul><h2 id="分支">分支</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git branch 分支名</code></td><td>创建分支</td></tr><tr><td><code>git branch -v</code></td><td>查看分支</td></tr><tr><td><code>git checkout 分支名</code></td><td>切换分支</td></tr><tr><td><code>git merge 分支名</code></td><td>把指定分支合并到当前分支</td></tr></tbody></table><p>合并冲突: 两个分支在同一文件有不同的修改, 需要手动修改</p><h2 id="远程库">远程库</h2><pre class="mermaid">---title: 工作流程---flowchart TB    i1[远程库]    i2[本地库]    i1-->|git clone|i2    i2-->|git push|i1</pre><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>git remote -v</code></td><td>查看远程库别名</td></tr><tr><td><code>git remote add 别名 链接</code></td><td>创建别名</td></tr><tr><td><code>git push 别名 分支名</code></td><td>推送到远程库</td></tr><tr><td><code>git pull 别名 分支名</code></td><td>拉取远程库</td></tr><tr><td><code>git clone 链接</code></td><td>克隆远程库</td></tr></tbody></table><h3 id="加入团队">加入团队</h3><blockquote><p>邀请者: repository --&gt; settings --&gt; collaborator<br>被邀请者: 将邀请函写入地址栏</p></blockquote><h3 id="跨团队">跨团队</h3><blockquote><p>fork --&gt; modify code --&gt; pull request</p></blockquote><h2 id="ssh免密登录">ssh免密登录</h2><p><code>ssh-keygen -t rsa -C qinw@12306.com</code><br>~/.ssh/id_rsa.pub --&gt; 复制公钥到账号的ssh keys --&gt; 可以根据SSH拉取(免密登录)</p><h2 id="idea配置">idea配置</h2><h3 id="忽略文件的ignore文件">忽略文件的ignore文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/git.ignore</span><br><span class="line"></span><br><span class="line"># 忽略*.log</span><br><span class="line">*.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/.giconfig</span><br><span class="line">[core]</span><br><span class="line">    excludesfile = ~/git.ignore</span><br><span class="line"># 用/而非\</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Git介绍&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;免费开源,&lt;em&gt;分布式&lt;/em&gt;&lt;strong&gt;版本控制&lt;/strong&gt;系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;分布式: 每台电脑都有自己的版本控制&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法日记</title>
    <link href="http://qingw.zxy/2025/02/07/%E7%AE%97%E6%B3%95%E6%97%A5%E8%AE%B0/"/>
    <id>http://qingw.zxy/2025/02/07/%E7%AE%97%E6%B3%95%E6%97%A5%E8%AE%B0/</id>
    <published>2025-02-07T12:21:05.566Z</published>
    <updated>2025-02-07T12:21:05.566Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Cpp瞎写</title>
    <link href="http://qingw.zxy/2025/02/03/cpp%E7%9E%8E%E5%86%99/"/>
    <id>http://qingw.zxy/2025/02/03/cpp%E7%9E%8E%E5%86%99/</id>
    <published>2025-02-03T06:21:22.065Z</published>
    <updated>2025-03-09T09:10:53.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>鉴于写博客有助于自己的学习,于是博主将自己所学的c++总结了一下</p></blockquote><h1>总体知识</h1><h2 id="总述">总述</h2><p>基础知识分为: 变量类型–&gt;基础语法–&gt;函数–&gt;类–&gt;库(细说stl)–&gt;多线程(进程)–&gt;堆栈–&gt;模板</p><h2 id="工程目录">工程目录</h2><p>我的工程目录–&gt;有助于分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Projects/Project_1</span><br><span class="line">├── bin --&gt; 放exe文件</span><br><span class="line">├── build --&gt; 放CMakeLists.txt</span><br><span class="line">├── data --&gt; 放图片等资源</span><br><span class="line">├── include --&gt; 放头文件</span><br><span class="line">├── lib --&gt; 放静态库,动态库</span><br><span class="line">└── src --&gt; 放c++源文件</span><br></pre></td></tr></table></figure><blockquote><p>另外: 头文件放结构体, 宏定义, 函数声明,类声明, 全局变量…而源文件放函数原型, 类原型.<br>Thinking: 可以把库底层写成xxx_Base.cpp, 把调用接口写成xxx_API.cpp</p></blockquote><p><strong>静态库的创建</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -c <span class="number">1.</span>cpp <span class="number">2.</span>cpp <span class="number">3.</span>cpp</span><br><span class="line">ar rcs libxxx.a <span class="number">1.</span>o <span class="number">2.</span>o <span class="number">3.</span>o</span><br></pre></td></tr></table></figure><p><strong>动态库的创建</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PIC -&gt; Position Independence Code</span></span><br><span class="line">gcc -shared -fPIC -o libxxx.so <span class="number">1.</span>cpp <span class="number">2.</span>cpp <span class="number">3.</span>cpp</span><br></pre></td></tr></table></figure><ul><li>Tips: 使用g++创建动态库时, 一定要在函数的外部加上<code>extern &quot;C&quot;&#123;函数&#125;</code>, 否则会出现函数符号无法找到.<br>例:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mylib.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用dlfcn.h需要导入动态库 -ldl     dl -- dynamic link</span></span><br><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 打开共享库</span></span><br><span class="line">    <span class="type">void</span> *handle = <span class="built_in">dlopen</span>(<span class="string">&quot;./libmylib.so&quot;</span>, RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span> (!handle) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error loading shared library: %s\n&quot;</span>, <span class="built_in">dlerror</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取函数指针</span></span><br><span class="line">    <span class="built_in">int</span> (*add_func)(<span class="type">int</span>, <span class="type">int</span>) = (<span class="built_in">int</span> (*)(<span class="type">int</span>, <span class="type">int</span>)) <span class="built_in">dlsym</span>(handle, <span class="string">&quot;add&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *error;</span><br><span class="line">    <span class="keyword">if</span> ((error = <span class="built_in">dlerror</span>()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Error finding symbol: %s\n&quot;</span>, error);</span><br><span class="line">        <span class="built_in">dlclose</span>(handle);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 调用函数</span></span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">add_func</span>(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Result: %d\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 关闭共享库</span></span><br><span class="line">    <span class="built_in">dlclose</span>(handle);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="g-的使用">g++的使用</h2><p><code>g++ main.cpp 1.cpp 2.cpp -o main.exe</code></p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-o</code></td><td>指定输出文件名</td></tr><tr><td><code>-std=c++17</code></td><td>指定标准版本</td></tr><tr><td><code>-g</code></td><td>生成调试信息</td></tr><tr><td><code>-O0/-O1/-O2/-O3</code></td><td>优化级别</td></tr><tr><td><code>-Wall</code></td><td>生成所有警告信息</td></tr><tr><td><code>-S</code></td><td>生成汇编.s文件</td></tr><tr><td><code>-c</code></td><td>生成.o文件</td></tr><tr><td><code>-E</code></td><td>生成预处理.i文件</td></tr><tr><td><code>-I/path/to/include</code></td><td>头文件路径</td></tr><tr><td><code>-L/path/to/lib/</code></td><td>库路径</td></tr><tr><td><code>-lmylib</code></td><td>链接libmylib.a静态库/libmylib.so(dll)的动态库(对库的引用放在命令的结尾)</td></tr><tr><td><code>-DDEBUG</code></td><td>相当于添加<code>#define DEBUG</code></td></tr></tbody></table><h2 id="变量类型">变量类型</h2><blockquote><p>区分数据类型的<strong>唯一标准</strong>是内存的<strong>字节</strong>占用,所有的数据都是二进制(01)表示的,不同的数据类型是编译器把二进制数据跟人进行交流的&quot;桥&quot;.</p></blockquote><ul><li>初识变量</li></ul><table><thead><tr><th>名称</th><th>符号</th><th>占用字节</th></tr></thead><tbody><tr><td>字符</td><td>char</td><td>1</td></tr><tr><td>布尔值</td><td>bool</td><td>1</td></tr><tr><td>短整型</td><td>short</td><td>2</td></tr><tr><td>整型</td><td>int</td><td>4</td></tr><tr><td>长整型</td><td>long</td><td>8</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4</td></tr><tr><td>双精度浮点数</td><td>double</td><td>8</td></tr><tr><td>指针</td><td>类型*</td><td>4(32位系统)/8(64位系统)</td></tr><tr><td>联合体</td><td>union</td><td>与最大的数据类型一样大</td></tr><tr><td>枚举体</td><td>enum</td><td>1/2/4(通常)</td></tr><tr><td>结构体</td><td>struct</td><td>有内存补齐操作无法确定</td></tr></tbody></table><h3 id="字符">字符</h3><ul><li><code>'x'</code>使用<code>''</code>包裹的一个字符&lt;–<code>man ascii</code>可以在线查看ascii表</li></ul><h3 id="整数">整数</h3><ul><li>有符号整数: 最高位0表示正数,1表示负数<br>假如int类型来解释100…100,该值为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31} + 2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li>无符号整数:</li></ul><h3 id="浮点数">浮点数</h3><p><em>遵循IEEE 754 标准</em></p><ul><li><strong>float(32)</strong></li></ul><table><thead><tr><th>部分</th><th>符号位</th><th>指数位</th><th>尾数位</th></tr></thead><tbody><tr><td>位数</td><td>1</td><td>8</td><td>23</td></tr></tbody></table><ul><li><strong>double(64)</strong></li></ul><table><thead><tr><th>部分</th><th>符号位</th><th>指数位</th><th>尾数位</th></tr></thead><tbody><tr><td>位数</td><td>1</td><td>11</td><td>52</td></tr></tbody></table><p>规格化值(Exp不全为0或1)<br>解释:</p><ul><li>sign(符号位): 0代表正,1代表负数</li><li>Exp(指数位): 实际指数为(Exp - 127(float)/1023(double)),范围是(-126 ~ 127)/(-1022~1023)</li><li>Man(尾数位):</li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>n</mi></mrow></msup><mtext>  </mtext><mtext>x</mtext><mtext>  </mtext><mn>1.</mn><mi>M</mi><mi>a</mi><mi>n</mi><mtext>  </mtext><mtext>x</mtext><msup><mn>2</mn><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mo>−</mo><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Value = (-1)^{Sign} \;\text{x}\; 1.Man \;\text{x} 2^{Exp-Bias}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">Va</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord">x</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1.</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">an</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord text"><span class="mord">x</span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="mord mathnormal mtight">ia</span><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span></span></p><p>非规格化值:</p><ul><li>Exp全为0时: 0值</li><li>Exp全为1,尾数全为0时: 无穷大<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></li><li>Exp全为1,尾数不全为0时: NaN</li></ul><h3 id="数组">数组</h3><p>须知:</p><ol><li>数组里可以装任何数据类型</li><li>数组实际上是在栈上的一连串的内存,数组名代表这一连串地址的起始地址(小地址&lt;–栈向低地址增长)</li><li>数组名不能更改(<s>arr+2</s>)</li><li>字符串(字符组成的数组,结尾是0(不是’0’))</li><li>数组的长度必须在编译前就知道(不能用变量,而必须用常量const)</li><li>指针的加减数字是根据指针指向的数据类型而定的,如<code>(int*)p + 1</code>是地址加4(int是4个长度)</li></ol><ul><li>性能优化:<br>将多维数组写成一维数组(防止内存碎片)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a2d = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>*<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123; <span class="comment">// i代表行,j代表列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;<span class="number">5</span>; j++)</span><br><span class="line">a2d[j + i*<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] a2</span><br></pre></td></tr></table></figure><h3 id="结构体">结构体</h3><ul><li>用处: 处理多返回值的函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">source</span></span><br><span class="line">&#123;</span><br><span class="line">std::string first;</span><br><span class="line">    std::string second;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">source</span> <span class="built_in">function</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">    vs = ..</span><br><span class="line">    fs = ..</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">struct</span> source&#123;vs, fs&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>与类的区别: 结构体默认public, 类默认private</li></ul><blockquote><p>Tips: 我们当然学习类啦</p></blockquote><h3 id="指针">指针</h3><p><strong>注意</strong></p><ul><li>指针需要初始化<code>int* ptr = nullptr</code>(推荐使用nullptr()而非0或者NULL)</li><li>通过new创建的(堆)内存块被释放后要将指向内存块的指针赋nullptr防止指针悬空,栈上的指针自动释放</li></ul><p><strong>优点</strong></p><ul><li>通过指针可以不用复制大量内存来传递参数,而是可以直接传递指针优化性能</li></ul><p><strong>智能指针</strong></p><ul><li><code>#include &lt;memory&gt;</code></li></ul><table><thead><tr><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td><code>std::unique_ptr&lt;类型&gt;</code></td><td>超出作用域自动释放,无法复制,只能移动<code>std::unique&lt;int&gt; p2 = std::move(p1)</code></td></tr><tr><td><code>std::shared_ptr&lt;类型&gt;</code></td><td>计数为0自动释放,可以复制</td></tr><tr><td><code>std::weak_ptr&lt;类型&gt;</code></td><td>lock()可以转化为shared_ptr来观察值,解决shared_ptr循环引用导致的计数无法归零</td></tr></tbody></table><h3 id="枚举体">枚举体</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">COLORS</span> : <span class="type">char</span>&#123; <span class="comment">// 指定枚举体基础类型是char</span></span><br><span class="line">    RED = <span class="string">&#x27;R&#x27;</span>, BLUE = <span class="string">&#x27;B&#x27;</span>, GREEN = <span class="string">&#x27;G&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>enum中的例子会隐式转化,enum class不会隐式转换,从而可以在不同的enum使用同名的名字</p></blockquote><h3 id="结构体-2">结构体</h3><p><strong>内存对齐规则</strong><br>从第一个开始遇到的最大的哪个数据类型为基础,之后的每个数据的起始位置必须是目前为止最大的数据的整数倍</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TestStruct</span> &#123;</span><br><span class="line">    <span class="type">short</span> a;  <span class="comment">// 2 bytes</span></span><br><span class="line">    <span class="type">char</span> b;   <span class="comment">// 1 byte</span></span><br><span class="line">    <span class="type">int</span> c;   <span class="comment">// 4 bytes</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构体大小是0-&gt;2-&gt;4-&gt;8,大小是8bytes</p><h3 id="联合体">联合体</h3><p>须知:</p><ul><li>联合体中的所有成员共享同一块内存空间。联合体的大小等于其最大成员的大小,利用类型双关.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">Price</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">float</span> b;</span><br><span class="line">&#125;</span><br><span class="line">Price p;</span><br><span class="line">p.a = <span class="number">4</span>;</span><br><span class="line">cout &lt;&lt; p.a &lt;&lt; endl;</span><br><span class="line">p.b = <span class="number">5.9</span>;</span><br><span class="line">cout &lt;&lt; p.b &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="函数">函数</h2><h3 id="函数说明符">函数说明符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;        <span class="comment">// 函数 f 不会抛出异常</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getValue</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// 承诺getValue() 函数不会修改类的任何成员变量</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span></span>; <span class="comment">// 表示 myFunction() 函数具有静态存储期</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">anotherFunction</span><span class="params">()</span></span>; <span class="comment">// 声明 anotherFunction() 函数在其他文件中定义</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125; <span class="comment">// 建议编译器将 add() 函数内联</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span></span>; <span class="comment">// 声明 draw() 函数为虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">MyClass</span><span class="params">(<span class="type">int</span> value)</span></span>; <span class="comment">// 禁止将 int 类型隐式转换为 MyClass 类型</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">friendFunction</span><span class="params">(MyClass&amp; obj)</span></span>; <span class="comment">// 声明 friendFunction() 为 MyClass 的友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> <span class="comment">// 声明 factorial() 函数为常量表达式函数</span></span></span><br></pre></td></tr></table></figure><h3 id="函数指针">函数指针</h3><p><code>返回类型 (*指针变量名)(参数类型列表);</code><br>举例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> (*add_ptr)(<span class="type">int</span>, <span class="type">int</span>) = add <span class="comment">// 或者&amp;add</span></span><br></pre></td></tr></table></figure><p>更灵活的方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line">std::function&lt;<span class="type">int</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; add_ptr = add; <span class="comment">//或者&amp;add</span></span><br><span class="line"><span class="type">int</span> res = <span class="built_in">add_ptr</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="lambda函数">lambda函数</h3><p>格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f = [](<span class="type">int</span> a, <span class="type">float</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// []是捕获列表---[=]传值捕获(只读,mutable后可改值)[&amp;]引用捕获[a,&amp;b]混合捕获</span></span><br><span class="line"><span class="comment">// ()是传参列表---()</span></span><br></pre></td></tr></table></figure><h3 id="函数重载">函数重载</h3><blockquote><p>在 C++ 中.如果两个函数名相同.但参数列表(个数、类型或顺序)不同.它们是不同的函数.这是通过函数重载实现的</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">log</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">log</span><span class="params">(<span class="type">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类">类</h2><blockquote><p>类是用户自定义的数据类型.包含数据成员(属性)和成员函数(方法)</p></blockquote><h3 id="基本结构">基本结构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:     <span class="comment">// 访问修饰符(默认private)</span></span><br><span class="line">  <span class="comment">// 成员函数声明</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// 数据成员声明</span></span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="类的可见性">类的可见性</h3><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">可允许访问的范围</th></tr></thead><tbody><tr><td style="text-align:center">private</td><td style="text-align:center">这个类和友类</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">这个类及子类及友类</td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">All</td></tr></tbody></table><h3 id="类的特殊函数">类的特殊函数</h3><h4 id="构造函数">构造函数</h4><ul><li><code>ClassName(int val, int dot) : data(val),data2(dot) &#123;&#125;  // 初始化列表</code>—data,data2的顺序要和声明的一样</li><li><code>ClassName a(1,2);</code>—利用值构造类</li></ul><h4 id="析构函数">析构函数</h4><ul><li><code>~ClassName() &#123; /* 清理资源 */ &#125;</code></li></ul><h4 id="拷贝构造函数">拷贝构造函数</h4><ul><li><code>ClassName(const ClassName&amp; other);</code></li><li><code>ClassName b = a</code>—利用类构造类</li></ul><h4 id="拷贝赋值函数">拷贝赋值函数</h4><ul><li><code>ClassName&amp; operator=(const ClassName&amp; other);</code></li><li><code>c = a</code>—类给类赋值</li></ul><h4 id="移动构造函数">移动构造函数</h4><ul><li><code>ClassName(ClassName&amp;&amp; other) noexcept;</code></li><li><code>ClassName d = std::move(a)</code>—利用类构造类</li></ul><h4 id="移动赋值函数">移动赋值函数</h4><ul><li><code>ClassName&amp; operator=(ClassName&amp;&amp; other) noexcept;</code></li><li><code>e = std::move(a)</code>—类给类赋值</li></ul><h4 id="单例">单例</h4><blockquote><p>删除赋值构造函数,private构造函数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>; <span class="comment">// 删除赋值构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton &amp;<span class="title">Get</span><span class="params">()</span> <span class="comment">// 调用方法返回单一实例</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">static</span> Singleton s_instance; <span class="comment">// 类属性</span></span><br><span class="line">        <span class="keyword">return</span> s_instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> : <span class="built_in">Singleton</span>() &#123;&#125; <span class="comment">// 不能在外界直接创造实例</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Singleton &amp;instance = Singleton::<span class="built_in">Get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的其他特征">类的其他特征</h3><h4 id="类的static数据">类的static数据</h4><blockquote><p>为类的属性而非实例,所有该类的实例共享这一份数据</p></blockquote><ul><li><code>static int val;</code></li></ul><h4 id="类的static函数">类的static函数</h4><blockquote><p>static方法只能访问static数据</p></blockquote><ul><li><code>static void printCount() &#123; cout &lt;&lt; count; &#125;</code></li></ul><h4 id="友元函数">友元函数</h4><ul><li><code>friend void friendFunction(ClassName obj);</code></li></ul><h4 id="友元类的声明">友元类的声明</h4><ul><li><code>friend class ClassName</code></li></ul><h4 id="运算符重载">运算符重载</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ClassName <span class="keyword">operator</span>+(<span class="type">const</span> ClassName&amp; other) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">ClassName</span>(data + other.data);</span><br><span class="line">&#125;</span><br><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;stream, <span class="type">const</span> Vector &amp;other) <span class="comment">//重载&lt;&lt;</span></span><br><span class="line">&#123;</span><br><span class="line">    stream &lt;&lt; other.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; other.y;</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承">继承</h4><p><code>class Derived : public Base &#123; /* ... */ &#125;;</code></p><h4 id="多态">多态</h4><blockquote><p>虚函数存在于父类,目的是为子类提供函数模板.重写函数存在子类,为子类提供不同的函数</p></blockquote><h5 id="虚函数">虚函数</h5><p><code>virtual void method() &#123; /* 基类实现 */ &#125;</code></p><h5 id="纯虚函数">纯虚函数</h5><blockquote><p>Tips: 包含纯虚函数的类无法实例化<br><code>virtual void pureMethod() = 0;</code></p></blockquote><h5 id="举例">举例</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">printable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">Getclassname</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义一个接口,是所有类的父类,里有纯虚函数Getclassname</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> : <span class="keyword">public</span> printable <span class="comment">// 继承</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">Getclassname</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Entity&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 重写Getclassname</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">Getclassname</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Player&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 重写Getclassname</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(printable *obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; obj-&gt;<span class="built_in">Getclassname</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;<span class="comment">// 传入指针对象来操作其对应的函数(已经override了)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Entity *e = <span class="keyword">new</span> Entity;</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">    Player *p = <span class="keyword">new</span> Player;</span><br><span class="line">    <span class="built_in">print</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="虚析构函数">虚析构函数</h5><blockquote><p>当基类的析构函数是虚函数时.通过基类指针删除派生类对象时.会正确调用派生类的析构函数。如果基类的析构函数不是虚函数.则只会调用基类的析构函数.导致派生类的资源泄漏。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base *poly = <span class="keyword">new</span> <span class="built_in">Diversy</span>(); <span class="comment">//Base是父类, Diversy是派生类</span></span><br><span class="line"><span class="keyword">delete</span> poly;<span class="comment">//若Base,Diversy的析构函数是vitural,那么会正常调用Diversy的析构函数,否则会调用Base的析构函数</span></span><br></pre></td></tr></table></figure><h3 id="类的高级特征">类的高级特征</h3><h4 id="override">override</h4><ul><li><code>void mtthod override;</code></li></ul><h4 id="final">final</h4><ul><li><code>class ClassName final&#123;&#125;;</code>禁止继承</li></ul><h4 id="成员初始化列表">成员初始化列表</h4><ul><li><code>ClassName a&#123;1,2&#125;;</code></li></ul><h3 id="this">this</h3><ul><li><code>this</code>代指本实例的指针</li></ul><h2 id="语法">语法</h2><h3 id="运算符">运算符</h3><h4 id="算术运算符">算术运算符</h4><ul><li>[ ] +</li><li>[ ] -</li><li>[ ] *</li><li>[ ] /</li><li>[ ] %</li><li>[ ] ++ # 注意前后置的区别</li><li>[ ] –</li></ul><h4 id="关系运算符">关系运算符</h4><ul><li>[ ] ==</li><li>[ ] !=</li><li>[ ] &gt;</li><li>[ ] &lt;</li><li>[ ] &gt;=</li><li>[ ] &lt;=</li></ul><h4 id="逻辑运算符">逻辑运算符</h4><ul><li>[ ] &amp;&amp;</li><li>[ ] ||</li><li>[ ] ! # 不全为0则为1</li></ul><h4 id="位运算符">位运算符</h4><ul><li>[ ] &amp;</li><li>[ ] |</li><li>[ ] ^ # a^b==0 --&gt; a==b</li><li>[ ] ~ # 按位取反</li><li>[ ] &lt;&lt; # 一般有符号是算术左移符号逻辑左移</li><li>[ ] &gt;&gt;</li></ul><h4 id="赋值运算符">赋值运算符</h4><ul><li>[ ] =</li><li>[ ] +=</li><li>[ ] -=</li><li>[ ] *=</li><li>[ ] /*</li><li>[ ] %=</li><li>[ ] &lt;&lt;=</li><li>[ ] &gt;&gt;=</li><li>[ ] &amp;=</li><li>[ ] ^=</li><li>[ ] |=</li></ul><h4 id="其他运算符">其他运算符</h4><ul><li>[ ] sizeof</li><li>[ ] condtion?x:y</li><li>[ ] ,</li><li>[ ] .</li><li>[ ] -&gt;</li><li>[ ] cast # int(2.2)</li><li>[ ] &amp; # 取地址</li><li>[ ] * # 取值</li></ul><h3 id="条件分支和循环">条件分支和循环</h3><h4 id="条件分支">条件分支</h4><h5 id="if">if</h5><h5 id="if-else">if else</h5><h5 id="if-else-if">if else if</h5><h5 id="switch-case">switch case</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(var)&#123;  <span class="comment">//var是整型或enum</span></span><br><span class="line">    <span class="keyword">case</span> val1</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> val2</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> val3</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环">循环</h4><h5 id="while">while</h5><h5 id="do…while">do…while</h5><h5 id="for">for</h5><h5 id="关键词">关键词</h5><ul><li>continue</li><li>break</li><li>return</li></ul><blockquote><p>Tips: 进入循环时最好将结果存储在循环体外的变量,减少内存访问</p></blockquote><h3 id="修饰符">修饰符</h3><h4 id="访问控制修饰符">访问控制修饰符</h4><table><thead><tr><th>public</th><th>类内外均可</th></tr></thead><tbody><tr><td>private</td><td>类内,友元类可以访问</td></tr><tr><td>protected</td><td>类内,友元类和子类可以访问</td></tr></tbody></table><h4 id="存储类修饰符">存储类修饰符</h4><p><strong>static</strong></p><ul><li>局部: 只初始化一次</li><li>全局/函数: 作用域限定在本文件</li><li>类成员: 所有实例共享这个数据</li></ul><p><strong>extern</strong></p><ul><li>声明变量/函数已经在其他文件被定义了</li></ul><p><strong>mutable</strong></p><ul><li>可以在<code>const</code>成员函数中修改类的成员<br>eg:</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">xx</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> b;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Getx</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">        a = <span class="number">2</span>; <span class="comment">// ok</span></span><br><span class="line">        b = <span class="number">3</span>; <span class="comment">// inhabit</span></span><br><span class="line">        <span class="keyword">return</span> m_x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>thread_local</strong><br><a href="https://www.cnblogs.com/bwbfight/p/18025752">详见此处</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">thread_local</span> <span class="type">int</span> g_n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_n++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;id=%d, n=%d\n&quot;</span>, std::this_thread::<span class="built_in">get_id</span>(),g_n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">thread_local</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;id=%d, i=%d\n&quot;</span>, std::this_thread::<span class="built_in">get_id</span>(), i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_n++; <span class="comment">// n=2</span></span><br><span class="line">    <span class="built_in">f</span>();    <span class="comment">// n=3 主进程</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(f)</span></span>; <span class="comment">// n=2 进程1</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(f)</span></span>; <span class="comment">// n=2 进程2</span></span><br><span class="line">    </span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">f2</span>(); <span class="comment">// i=0 i=1  主进程</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t4</span><span class="params">(f2)</span></span>; <span class="comment">// i=0 i=1 进程3</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t5</span><span class="params">(f2)</span></span>; <span class="comment">// i=0 i=1 进程4</span></span><br><span class="line"></span><br><span class="line">    t<span class="number">4.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">5.</span><span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型限定符">类型限定符</h4><p><strong>const</strong></p><ul><li>const 变量 --&gt; 常量</li><li>成员函数 const --&gt;禁止修改成员状态</li><li>const int* 指针指向常量;int *const 指针不可变</li></ul><p><strong>volatile</strong></p><ul><li>变量可能被外部修改,禁止编译器优化</li></ul><h4 id="类型修饰符">类型修饰符</h4><p><strong>signed/unsigned</strong><br><strong>short/long/long long</strong></p><h4 id="函数修饰符">函数修饰符</h4><p><strong>inline</strong></p><ul><li>内联函数, 直接将函数体的源代码复制到调用处(适用于函数体小的函数)</li></ul><p><strong>vitural</strong></p><ul><li>定义虚函数</li></ul><p><strong>override</strong></p><ul><li>重写虚函数</li></ul><p><strong>final</strong></p><ul><li>禁止派生类覆盖虚函数, 或者禁止子类</li></ul><p><strong>constexpr</strong></p><ul><li>编译时可求出函数的返回值</li></ul><p><strong>noexcept</strong></p><ul><li>函数不可抛出异常</li></ul><p><strong>explict</strong></p><ul><li>禁止构造函数隐式转换</li></ul><h3 id="输入输出">输入输出</h3><h4 id="cin">cin</h4><ul><li>cin &gt;&gt; data; // 忽略前导空格,到下一个空白符或换行符或EOF停止读入</li><li>cin.getline(); // 丢弃换行符</li><li>cin.get();  // 逐个字符读取,不会丢弃空格和换行符</li></ul><h4 id="文件">文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::ofstream Outfile; <span class="comment">// cout 用法基本一样 setf()</span></span><br><span class="line">    Outfile.<span class="built_in">open</span>(filename); <span class="comment">// binding name</span></span><br><span class="line">    fOut &lt;&lt; content;</span><br><span class="line">    Outfile.<span class="built_in">close</span>();</span><br><span class="line">    </span><br><span class="line">    std::ifstream Infile <span class="comment">// cin</span></span><br><span class="line">    Infile.<span class="built_in">open</span>(filename);</span><br><span class="line">    fin &gt;&gt; content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆和栈">堆和栈</h2><p><img src="https://originlee.com/images/blog-runtime_memory_model.png" alt="虚拟内存管理图"></p><ol><li><strong>栈(Stack)</strong><br><strong>特点</strong></li></ol><ul><li><p>内存分配方式:由编译器自动分配和释放,遵循“后进先出”(LIFO)原则。</p></li><li><p>存储内容：局部变量、函数参数、函数调用信息(如返回地址)等。</p></li><li><p>内存管理：内存分配和释放由系统<u>自动</u>完成.效率高。</p></li><li><p>大小限制：栈的大小通常较小(如几MB)具体取决于操作系统和编译器设置。</p></li><li><p>访问速度：访问速度快.因为内存分配是<u>连续</u>的。</p></li><li><p>栈向下增长</p></li></ul><p><strong>优点</strong></p><ul><li><p>高效：内存分配和释放由系统自动完成。</p></li><li><p>简单：无需手动管理内存。</p></li></ul><p><strong>缺点</strong></p><ul><li><p>大小受限：栈空间有限.不适合存储大量数据。</p></li><li><p>生命周期固定：变量的生命周期仅限于函数作用域。</p></li></ul><p><strong>栈帧结构</strong><br><img src="https://originlee.com/images/blog-stack_frame.png" alt=""></p><ol><li><strong>堆(Heap)</strong><br><strong>特点</strong></li></ol><ul><li><p>内存分配方式:手动分配和释放(new/delete或者智能指针)。</p></li><li><p>存储内容：存储动态分配的内存(如对象、数组等)。</p></li><li><p>内存管理：需要程序员手动管理.否则可能导致内存泄漏或野指针。</p></li><li><p>大小限制：堆的大小通常较大.受系统可用内存限制。</p></li><li><p>访问速度：访问速度较慢.因为内存分配是动态且不连续的。</p></li><li><p>堆大体上向上增长(但是内存不是连续分配的)</p></li><li></li><li><p>假设堆的起始地址为 0x1000,当程序需要分配一块 100 字节的内存时，操作系统可能会分配地址范围为 0x1000 到 0x1064 的内存块。如果程序再次需要分配内存，新分配的内存块的地址将会大于 0x1064。</p></li></ul><h2 id="元编程模板">元编程模板</h2><p><code>template</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T array[N];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Get_Size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> N;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Array&lt;<span class="type">int</span>, <span class="number">5</span>&gt; array;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型设计的理想状态是一个查找算法将可以作用于数组，联表，树，图等各种数据结构之上，变成一个通用的，泛型的算法。</p></blockquote><h2 id="STL-Standard-Template-Library">STL(Standard Template Library)</h2><p><code>#include &lt;bits/stdc++.h&gt;</code></p><h3 id="总览">总览</h3><ul><li>[ ] 基础知识</li><li>[ ] 算法(Algorithm)</li><li>[ ] 容器(Container)</li><li>[ ] 迭代器(Iterator)</li><li>[ ] 仿函数(Function Object)</li></ul><h3 id="基础知识">基础知识</h3><h4 id="类型转换">类型转换</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> f = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(f);  <span class="comment">// 静态类型转换,类似C,不允许类似int* -&gt;float*</span></span><br><span class="line"></span><br><span class="line">Base *b = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">Derived *d = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(b);  <span class="comment">// 动态类型转换,会检查b是不是Derived 类型(提供类型检查),不是就会返回nullptr</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;a);  <span class="comment">// 去掉常量性,不允许跨类型转换，只改变const性</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="type">void</span>* p = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span>*&gt;(&amp;a);  <span class="comment">// 转换指针类型</span></span><br></pre></td></tr></table></figure><h3 id="容器">容器</h3><h4 id="pair">pair</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; p = &#123;<span class="number">1</span>, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;; <span class="comment">// 初始化 </span></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; arr[<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125; <span class="comment">// 初始化数组</span></span><br><span class="line">cout &lt;&lt; p.first &lt;&lt; p.second.first; <span class="comment">// 访问</span></span><br></pre></td></tr></table></figure><h4 id="vector">vector</h4><p>特征: 自由伸缩(对性能有影响), 存储在堆上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init</span></span><br><span class="line"><span class="function">vector&lt;类型&gt; <span class="title">v</span><span class="params">([大小],[初始值])</span></span>;</span><br><span class="line"><span class="comment">// add</span></span><br><span class="line">vector.<span class="built_in">emplace_back</span>();</span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line">vector.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">// return size</span></span><br><span class="line">vector.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">// resize</span></span><br><span class="line">vector.<span class="built_in">resize</span>(length,initvalue);</span><br><span class="line"><span class="comment">// clear -- erase the entire vector</span></span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">// empty -- to say if the vector is empty</span></span><br><span class="line">cout &lt;&lt; v.<span class="built_in">empty</span>();</span><br><span class="line"><span class="comment">// iterator</span></span><br><span class="line"><span class="keyword">auto</span> it = vector.<span class="built_in">begin</span>(), vector.<span class="built_in">rbegin</span>(), vec.<span class="built_in">end</span>(), vec.<span class="built_in">rend</span>() </span><br><span class="line"><span class="comment">// value at an index</span></span><br><span class="line">vector[index], vector.<span class="built_in">back</span>()</span><br><span class="line"><span class="comment">// erase</span></span><br><span class="line">vector.<span class="built_in">erase</span>(迭代器)</span><br><span class="line">vector.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>()<span class="number">+2</span>, v.<span class="built_in">begin</span>()<span class="number">+4</span>) <span class="comment">// 删除[3,5)</span></span><br><span class="line"><span class="comment">// loop</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it : v)&#123;</span><br><span class="line">    cout &lt;&lt; it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// insert</span></span><br><span class="line">v.<span class="built_in">insert</span>(迭代器, 值)</span><br><span class="line">v.<span class="built_in">insert</span>(迭代器, 个数, 值)</span><br><span class="line">v.<span class="built_in">insert</span>(迭代器<span class="number">1</span>, 迭代器<span class="number">2</span>, 迭代器<span class="number">3</span>) <span class="comment">// 从迭代器1插入[迭代器2,迭代器3)的值</span></span><br><span class="line"><span class="comment">// swap</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">swap</span>(v2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="list">list</h4><p>特征: 可以双向插入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init </span></span><br><span class="line">list&lt;<span class="type">int</span>&gt; ls;</span><br><span class="line"></span><br><span class="line">ls.<span class="built_in">push_back</span>();</span><br><span class="line">ls.<span class="built_in">emplace_back</span>();</span><br><span class="line">ls.<span class="built_in">push_front</span>();</span><br><span class="line">ls.<span class="built_in">emplace_front</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest like vector</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="stack">stack</h4><p>特征: 单向操作,LIFO(后进先出)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="comment">// push</span></span><br><span class="line">st.<span class="built_in">push</span>();</span><br><span class="line"><span class="comment">//emplace</span></span><br><span class="line">st.<span class="built_in">emplace</span>();</span><br><span class="line"><span class="comment">// top</span></span><br><span class="line">std::cout &lt;&lt; st.<span class="built_in">top</span>();</span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line">st.<span class="built_in">pop</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest like vector</span></span><br></pre></td></tr></table></figure><h4 id="queue">queue</h4><p>特征: 单向操作. FIFO(先进先出)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="comment">// push</span></span><br><span class="line">q.<span class="built_in">push</span>();</span><br><span class="line">q.<span class="built_in">emplace</span>()</span><br><span class="line"><span class="comment">// back/front</span></span><br><span class="line">q.<span class="built_in">back</span>();</span><br><span class="line">q.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br></pre></td></tr></table></figure><h4 id="priority-queue">priority_queue</h4><p>特征：最大值在顶部，其余像queue</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq; <span class="comment">// &#123;5,4,2,1&#125;</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; pq; <span class="comment">// &#123;1,2,4,5&#125;</span></span><br><span class="line"><span class="comment">// top</span></span><br><span class="line">pq.<span class="built_in">top</span>(); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">// push</span></span><br><span class="line">pq.<span class="built_in">push</span>();</span><br><span class="line">pq.<span class="built_in">emplace</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="set">set</h4><p>特征: 按<u>大小排序</u>记录<u>唯一性</u>元素<br>时间复杂度: O(lgn)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">// insert</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>); <span class="comment">// &#123;1&#125;</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>); <span class="comment">// &#123;1,2&#125;</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>); <span class="comment">// &#123;1,2&#125;</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">4</span>); <span class="comment">// &#123;1,2,4&#125;</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>); <span class="comment">// &#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">auto</span> it = s.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// erase</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">4</span>);s.<span class="built_in">erase</span>(it); <span class="comment">// number or iterator</span></span><br><span class="line">s.<span class="built_in">erase</span>(it1, it2); <span class="comment">// erase [it1, it2)</span></span><br><span class="line"><span class="comment">// count</span></span><br><span class="line">s.<span class="built_in">count</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// lower_bound</span></span><br><span class="line"><span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(<span class="number">2</span>) <span class="comment">// return the first x like 2&lt;=x</span></span><br><span class="line"><span class="keyword">auto</span> it = s.<span class="built_in">upper_bound</span>(<span class="number">2</span>) <span class="comment">// return the first x like 2&gt;=x</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="multiset">multiset</h4><p>特征: 按<u>大小排序</u>记录元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init</span></span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; ms;</span><br><span class="line"><span class="comment">// insert</span></span><br><span class="line">ms.<span class="built_in">insert</span>(<span class="number">1</span>); <span class="comment">// &#123;1&#125;</span></span><br><span class="line">ms.<span class="built_in">insert</span>(<span class="number">1</span>); <span class="comment">// &#123;1&#125;</span></span><br><span class="line">ms.<span class="built_in">insert</span>(<span class="number">1</span>); <span class="comment">// &#123;1&#125;</span></span><br><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">auto</span> it = ms.<span class="built_in">find</span>(<span class="number">1</span>); <span class="comment">// 如果找不到就在ms.end()</span></span><br><span class="line"><span class="comment">// erase single</span></span><br><span class="line">ms.<span class="built_in">erase</span>(it);</span><br><span class="line"><span class="comment">// erase range</span></span><br><span class="line">ms.<span class="built_in">erase</span>(it, it<span class="number">+2</span>);</span><br><span class="line"><span class="comment">// erase all;</span></span><br><span class="line">ms.<span class="built_in">erase</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="unorder-set">unorder_set</h4><p>特征: 无序记录<u>唯一性</u>元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init</span></span><br><span class="line">unorder_set&lt;<span class="type">int</span>&gt; us;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无upper_bound, lower_bound</span></span><br></pre></td></tr></table></figure><h4 id="map">map</h4><p>特征 : 以键的大小顺序排序,类似字典(但是字典的类型是任意的)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="comment">// get value</span></span><br><span class="line">value = mp[key];</span><br><span class="line"><span class="comment">// get iterator</span></span><br><span class="line"><span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="comment">// insert/emplace</span></span><br><span class="line">mp.<span class="built_in">insert</span>(&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line">mp.<span class="built_in">emplace</span>(&#123;<span class="number">1</span>,<span class="number">2</span>&#125;);</span><br><span class="line"><span class="comment">// see the every pair in map</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : mp)&#123;</span><br><span class="line">    cout &lt;&lt; it.first &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; it.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="multimap">multimap</h4><p>特征: 类似map(但是可以存储多个键)</p><h4 id="unordered-map">unordered_map</h4><p>特征: 不会按照键的大小排序</p><h3 id="算法">算法</h3><h4 id="sort">sort</h4><p>快速排序<br><code>sort(it_begin, it_end(), cmp)</code></p><blockquote><p>默认是升序, <code>greater&lt;int&gt;</code>是降序<br>cmp返回结果为真, 上一个元素在前(即排序正确不需要重排)</p></blockquote><h4 id="builtin-popcount">__builtin_popcount</h4><ul><li>计算二进制位数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> bits = __builtin_popcout(<span class="type">int</span> x);</span><br><span class="line"><span class="type">int</span> bits = __builtin_popcoutl(<span class="type">long</span> x);</span><br><span class="line"><span class="type">int</span> bits = __builtin_popcoutll(<span class="type">long</span> <span class="type">long</span> x);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="next-permutation">next_permutation</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">// 123, 132, 213, 231, 312, 321</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="max-element">max_element</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> maxi = *<span class="built_in">max_element</span>(it_begin, it_end);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="reverse">reverse</h4><p><code>reverse(arr.begin(), arr.end()</code>反转元素</p><h4 id="gcd-lcm">gcd/lcm</h4><p><code>gcd(int a, int b)</code>最大公倍数<br><code>lcm(int a, int b)</code>最小公因数</p><h4 id="向上取整-向下取整">向上取整, 向下取整</h4><p><code>a/b</code> --&gt; floor<br><code>a/b + 1</code> --&gt; ceil</p><h4 id="快速幂">快速幂</h4><blockquote><p>利用位运算</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res *= a;</span><br><span class="line">    a *= a;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;鉴于写博客有助于自己的学习,于是博主将自己所学的c++总结了一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;总体知识&lt;/h1&gt;
&lt;h2 id=&quot;总述&quot;&gt;总述&lt;/h2&gt;
&lt;p&gt;基础知识分为: 变量类型–&amp;gt;基础语法–&amp;gt;函数–&amp;gt;类–&amp;</summary>
      
    
    
    
    
    <category term="c++" scheme="http://qingw.zxy/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Gdb入门</title>
    <link href="http://qingw.zxy/2025/02/02/gdb%E5%85%A5%E9%97%A8/"/>
    <id>http://qingw.zxy/2025/02/02/gdb%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-02T06:06:49.764Z</published>
    <updated>2025-02-03T06:14:33.933Z</updated>
    
    <content type="html"><![CDATA[<h1>开始与退出</h1><blockquote><p>首先我们要启动gdb</p></blockquote><ul><li><code>gdb &lt;program&gt;</code>&lt;–<strong>调试可执行文件</strong></li><li><code>gdb &lt;program&gt; --args 参数</code>&lt;–<strong>带参数调试</strong></li><li><code>q</code>&lt;–<strong>退出</strong></li></ul><h1>断点</h1><blockquote><p>其次我们想要查看某一刻程序的变量</p></blockquote><h2 id="断点的设置">断点的设置</h2><ul><li><code>break 函数名/行数</code></li><li><code>break *地址</code></li><li><code>break 文件:行数</code></li><li><code>break xxx if 条件</code>—条件断点</li></ul><h2 id="断点的查看与删除">断点的查看与删除</h2><ul><li><code>info breakpoints</code>—查看所有断点</li><li><code>delete [断点编号]</code>—删除指定断点</li><li><code>delete breakpoints</code>—删除所有断点</li></ul><h2 id="变量的监视">变量的监视</h2><ul><li><code>watch [变量名]</code>—变量写入时暂停</li><li><code>rwatch [变量名]</code>—变量读入时暂停</li><li><code>awatch [变量名]</code>—变量读写时暂停</li></ul><h1>运行</h1><h2 id="控制">控制</h2><ul><li><code>run或r</code>—开始运行</li><li><code>start</code>—停在main函数开头</li><li><code>continue或c</code>—继续</li></ul><h2 id="单步执行">单步执行</h2><ul><li><code>next 或 n</code>—执行下一行（跳过函数调用）</li><li><code>step 或 s</code>—执行下一行（进入函数内部）</li><li><code>stepi (n)</code>—单步二进制命令</li><li><code>finish</code>—执行完当前函数并返回</li><li><code>until [行号]</code>—执行到指定行号</li></ul><h1>查看代码和值</h1><h2 id="查看代码">查看代码</h2><ul><li><code>list 或 l</code></li><li><code>list [函数名]</code></li></ul><h2 id="查看变量-寄存器-内存">查看变量/寄存器/内存</h2><ul><li><code>print 或 p 变量</code>—打印出变量的值</li><li><code>print *arr@num</code>—打印数组</li><li><code>info register</code>—查看寄存器</li><li><code>x/[格式] [地址]</code>—查看内存的值</li></ul><blockquote><p>格式–&gt;[count][format][size]<br>count: 查看的单元数量—&gt;1,2,3…n<br>format: 显示的形式—&gt;x(十六进制),o(八进制),t(二进制),d(有符号十进制),u(无符号十进制),s(字符串),i(反汇编指令)<br>size: 单元的大小—&gt;b(1字节),h(2字节),w(4字节),g(8字节)<br>address: 地址—&gt;具体地址,寄存器,变量名,表达式</p></blockquote><h2 id="查看调用栈">查看调用栈</h2><ul><li><code>backtrace或bt</code>—查看调用栈</li><li><code>frame [编号]</code>—切换到指定栈帧</li><li><code>up/down</code>—切换到上层/下层栈帧</li></ul><h2 id="查看反汇编代码">查看反汇编代码</h2><ul><li><code>disas(semable)</code></li></ul><h2 id="UI交互">UI交互</h2><ul><li><p><code>display 模式</code></p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>src</td><td>源码</td></tr><tr><td>asm</td><td>汇编</td></tr><tr><td>split</td><td>源码和汇编</td></tr><tr><td>regs</td><td>寄存器</td></tr></tbody></table></li></ul><blockquote><p>Tips: 界面混乱时Ctrl+L刷新界面</p></blockquote><h2 id="其他">其他</h2><ul><li><code>set [var]=[valuve]</code>—设置变量</li><li><code>call [函数名](参数)</code>—调用函数</li></ul><blockquote><p>Tips: 交互模式下Enter键是继续执行上一个命令</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;开始与退出&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;首先我们要启动gdb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gdb &amp;lt;program&amp;gt;&lt;/code&gt;&amp;lt;–&lt;strong&gt;调试可执行文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chrome高效搜索</title>
    <link href="http://qingw.zxy/2025/02/01/Chrome%E9%AB%98%E6%95%88%E6%90%9C%E7%B4%A2/"/>
    <id>http://qingw.zxy/2025/02/01/Chrome%E9%AB%98%E6%95%88%E6%90%9C%E7%B4%A2/</id>
    <published>2025-02-01T14:46:58.343Z</published>
    <updated>2025-02-01T15:08:04.251Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>搜索运算符</p><ul><li><code>引号(&quot;comment&quot;)</code>： 用于搜索完全匹配的短语。</li><li><code>减号(-keyword)</code>： 用于排除某个关键词。</li><li><code>加号(+keyword)</code>： 用于强制包含某个关键词。</li><li><code>星号(*)</code>： 用于匹配任意字符。</li><li><code>site:网址</code>:： 用于在特定网站内搜索。</li><li><code>关键词 filetype:文件类型</code>： 用于搜索特定文件类型。</li></ul></li><li><p>使用英文搜索</p></li><li><p>一些网站</p><ul><li>youtube4kdownloader 下载youtube4k,tiktok,bilibili视频(通过地址)</li><li>sitesimilar 同类网站</li><li>best site for free xxx(image…) 就可以白嫖啦</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;搜索运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;引号(&amp;quot;comment&amp;quot;)&lt;/code&gt;： 用于搜索完全匹配的短语。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;减号(-keyword)&lt;/code&gt;： 用于排除某个关键词。&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="其他" scheme="http://qingw.zxy/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Cmake入门</title>
    <link href="http://qingw.zxy/2025/02/01/Cmake%E5%85%A5%E9%97%A8/"/>
    <id>http://qingw.zxy/2025/02/01/Cmake%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-01T07:45:52.904Z</published>
    <updated>2025-02-01T14:47:18.881Z</updated>
    
    <content type="html"><![CDATA[<p>引用说明: <a href="https://subingwen.cn/cmake/CMake-primer/">参考这篇博客</a></p><h1>Cmake入门</h1><h2 id="什么是Cmake？">什么是Cmake？</h2><blockquote><p>跨平台构建工具：用于生成不同平台（如 Linux/Makefile、Windows/Visual Studio、macOS/Xcode）的构建文件。<br>元构建系统：不直接编译代码，而是生成其他构建工具（如 Make、Ninja）所需的配置文件。<br>核心优势：通过编写 CMakeLists.txt 文件描述项目结构，避免手动维护不同平台的构建脚本。</p></blockquote><h2 id="安装Cmake">安装Cmake</h2><p><code>Ubuntu: sudo apt install cmake</code></p><h2 id="工程目录结构">工程目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">├── build</span><br><span class="line">├── data</span><br><span class="line">├── include</span><br><span class="line">├── lib</span><br><span class="line">└── src</span><br></pre></td></tr></table></figure><blockquote><p>Tips: 将CMakeLists.txt放在build文件夹里更整洁</p></blockquote><h2 id="语言格式">语言格式</h2><h3 id="注释">注释</h3><p><code>行注释: #</code><br><code>块注释: #[[]]</code></p><h3 id="基础项目">基础项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.0) # 指定Cmake版本</span><br><span class="line">project(CALC) # 工程名字</span><br><span class="line">add_executable(app add.c div.c main.c mult.c sub.c) # 用c文件生成app的可执行文件</span><br></pre></td></tr></table></figure><h3 id="定义变量">定义变量</h3><p><code>SET(var val1 val2 val3)</code></p><ul><li>一个特殊变量CAMKE_CXX_STANDARD是c++标准<code>SET CMAKE_CXX_STANDARD 17 </code>等同于<code>-std=c++17</code></li></ul><blockquote><p>Tips: ${var}来使用变量</p></blockquote><blockquote><p>Thoughts: HOME变量自定义在project根目录(绝对目录)下</p></blockquote><h3 id="文件搜索">文件搜索</h3><p><code>file(GLOB dir var)</code></p><blockquote><p>Tips: <code>file(GLOB $&#123;HOME&#125;/include/*.h HEAD_FILE)</code></p></blockquote><h3 id="头文件">头文件</h3><p><code>include_directories(headpath)</code></p><h3 id="库">库</h3><h4 id="制作自己的库文件">制作自己的库文件</h4><ul><li><code>add_library(库名称 STATIC 源文件1 [源文件2] ...)</code></li><li><code>add_library(库名称 SHARED 源文件1 [源文件2] ...)</code></li></ul><h4 id="库目录-让编译器知道引用了什么库文件">库目录(让编译器知道引用了什么库文件)</h4><h5 id="静态库">静态库</h5><ul><li><code>link_libraries(&lt;static lib&gt; [&lt;static lib&gt;...])</code>适用于第三方库 --&gt; 输入库名称</li><li><code>link_directories(&lt;lib path&gt;)</code>适用于自带系统库 --&gt;输入库路径</li></ul><h5 id="动态库">动态库</h5><p><code>target_link_libraries(可执行文件 库名称</code></p><blockquote><p>Tips: 库的名称掐头(lib)去尾(.a,.so…)</p></blockquote><h3 id="总结">总结</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cmake_mininum_required(VERSION <span class="number">3.0</span>) <span class="comment">#最低版本</span></span><br><span class="line"><span class="keyword">project</span>(name) <span class="comment">#工程名字</span></span><br><span class="line"><span class="keyword">SET</span>(SRC_LIST <span class="number">1</span>.cpp <span class="number">2</span>.cpp <span class="number">3</span>.cpp) <span class="comment">#定义变量</span></span><br><span class="line"><span class="keyword">SET</span>(CMAKE_CXX_STANDARD <span class="number">17</span>) <span class="comment"># c++标准</span></span><br><span class="line"><span class="keyword">SET</span>(HOME ~/Code)</span><br><span class="line"><span class="keyword">SET</span>(EXCUATABLE_OUTPUT_PATH <span class="variable">$&#123;HOME&#125;</span>/bin) <span class="comment">#输出文件路径</span></span><br><span class="line"><span class="keyword">SET</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;HOME/lib&#125;</span>) <span class="comment">#输出库文件路径</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;HOME&#125;</span>/bin/*.cpp) <span class="comment">#搜索全部cpp文件,存储到SRC_LIST</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;HOME&#125;</span>/<span class="keyword">include</span>) <span class="comment">#指定头文件搜索目录</span></span><br><span class="line"><span class="keyword">add_executable</span>(program.exe <span class="variable">$&#123;SRC_LIST&#125;</span>) <span class="comment">#空格或;间隔</span></span><br><span class="line"><span class="keyword">add_library</span>(库名称 STATIC/SHARED 源文件) <span class="comment">#制作库文件</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;message $&#123;HOME&#125;&quot;</span>) <span class="comment">#WARNING,SEND_ERROR,FATAL_ERROR(中断)</span></span><br><span class="line">add_definition(-D宏名称) <span class="comment">#自定义宏名称</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;引用说明: &lt;a href=&quot;https://subingwen.cn/cmake/CMake-primer/&quot;&gt;参考这篇博客&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Cmake入门&lt;/h1&gt;
&lt;h2 id=&quot;什么是Cmake？&quot;&gt;什么是Cmake？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;</summary>
      
    
    
    
    
    <category term="工具" scheme="http://qingw.zxy/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Latex入门</title>
    <link href="http://qingw.zxy/2025/02/01/Latex%E5%85%A5%E9%97%A8/"/>
    <id>http://qingw.zxy/2025/02/01/Latex%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-01T05:24:30.471Z</published>
    <updated>2025-02-01T14:47:30.386Z</updated>
    
    
    
    
    
    <category term="工具" scheme="http://qingw.zxy/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Md入门</title>
    <link href="http://qingw.zxy/2025/02/01/md%E5%85%A5%E9%97%A8/"/>
    <id>http://qingw.zxy/2025/02/01/md%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-01T04:43:15.664Z</published>
    <updated>2025-02-01T14:47:36.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Intro: 本文按常用的语法排序</p></blockquote><h2 id="常用">常用</h2><table><thead><tr><th>语法</th><th>解释</th><th>举例</th><th>是否可以多级</th></tr></thead><tbody><tr><td><code>*</code></td><td>(n级)标题</td><td><code>* 一级标题</code></td><td>yes</td></tr><tr><td><code>-</code></td><td>列表</td><td><code>- xxxx</code></td><td>no</td></tr><tr><td><code>1.</code>(2,3,…)</td><td>有序列表</td><td><code>1. xxxx</code></td><td>yes</td></tr><tr><td><code>- [ ]</code></td><td>可选列表</td><td>无</td><td>yes</td></tr><tr><td><code>&gt; </code></td><td>引用</td><td><code>&gt; 序言</code></td><td>yes</td></tr><tr><td><code>-------</code></td><td>分割线</td><td>无</td><td>no</td></tr></tbody></table><h2 id="代码">代码</h2><p>```语言</p><p>代码块</p><p>```</p><p>`代码行`</p><h2 id="表格">表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|标题1|标题2|标题三|  </span><br><span class="line">|----|--|--|</span><br><span class="line">|内容|内容|内容|内容|</span><br></pre></td></tr></table></figure><h2 id="超链接">超链接</h2><p>方法一: <code>[文本](http或者文件位置)</code><br>方法二: <code>[文本][a]</code> + <code>[a]:http或者文件位置</code></p><h2 id="图片">图片</h2><p><code>![图片名](http或者文件位置)</code></p><h2 id="文本操作">文本操作</h2><table><thead><tr><th>操作</th><th>代码</th></tr></thead><tbody><tr><td><em>斜体</em></td><td>*斜体*</td></tr><tr><td><strong>粗体</strong></td><td>**粗体**</td></tr><tr><td><em><strong>粗斜体</strong></em></td><td>***粗斜体***</td></tr><tr><td><s>删除</s></td><td>~~删除~~</td></tr><tr><td><u>下划线</u></td><td><code>&lt;u&gt;下划线&lt;/u&gt;</code></td></tr></tbody></table><h2 id="Latex数学公式">Latex数学公式</h2><blockquote><p>LaTeX（发音为“LAY-tek”或“LAH-tek”）是一种基于TeX的高质量排版系统，广泛用于学术论文、科技文档、书籍等专业排版。与常见的所见即所得（WYSIWYG）文字处理软件（如Microsoft Word）不同，LaTeX通过编写纯文本代码控制文档格式，尤其擅长处理复杂数学公式、参考文献、交叉引用等。</p></blockquote><h3 id="markdown里输入Latex数学公式">markdown里输入Latex数学公式</h3><ul><li><p>行Latex</p><p>$数学公式$</p></li><li><p>块Latex</p><p>$$</p></li><li><p>数学公式查看(不会的时候上网查(或者安装插件(LaTeX Workshop)，不要记太多了,此处仅举一些例子)</p></li></ul><h3 id="希腊字母">希腊字母</h3><p><img src="https://xyh97.home.blog/wp-content/uploads/2020/07/screen-shot-2020-07-17-at-18.43.44.png" alt=""></p><blockquote><p>Tips: 首字母大写可以让希腊字母大写,\varlambda可以换成变量形式的lambda</p></blockquote><h3 id="上下标">上下标</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></msup><mtext>和</mtext><msub><mi>x</mi><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x^{y+z} 和 x_{y+z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0574em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2583em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></p><p><code>x^&#123;y+z&#125; 和 x_&#123;y+z&#125;</code></p><blockquote><p>Tips: 英文字母只有在表示变量时才用斜体,故用\text{ij}来显示直立体,完美!且超过一个英文字母时也要用直体</p></blockquote><h3 id="分式和根式">分式和根式</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>分子</mtext><mtext>分母</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{分子}{分母}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">分母</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">分子</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><ul><li><code>\frac&#123;分子&#125;&#123;分母&#125;</code></li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mroot><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mn>3</mn></mroot></mrow><annotation encoding="application/x-tex">\sqrt[3]{x+y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.2606em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6336em;"><span style="top:-2.8113em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7794em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.7394em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2606em;"><span></span></span></span></span></span></span></span></span></p><ul><li><code>\sqrt[3]&#123;x+y&#125;</code></li></ul><h3 id="运算符">运算符</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>+</mo><mo>−</mo><mspace linebreak="newline"></mspace><mo>×</mo><mo separator="true">,</mo><mo>⋅</mo><mo separator="true">,</mo><mo>÷</mo><mspace linebreak="newline"></mspace><mo>±</mo><mo separator="true">,</mo><mo>∓</mo><mspace linebreak="newline"></mspace><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mo separator="true">,</mo><mo>≥</mo><mo separator="true">,</mo><mo>≤</mo><mo separator="true">,</mo><mo>≫</mo><mo separator="true">,</mo><mo>≪</mo><mo separator="true">,</mo><mo mathvariant="normal">≠</mo><mo separator="true">,</mo><mo>≈</mo><mo separator="true">,</mo><mo>≡</mo><mspace linebreak="newline"></mspace><mo>∩</mo><mo separator="true">,</mo><mo>∪</mo><mo separator="true">,</mo><mo>∈</mo><mo separator="true">,</mo><mo mathvariant="normal">∉</mo><mo separator="true">,</mo><mo>⊂</mo><mo separator="true">,</mo><mo>⊆</mo><mo separator="true">,</mo><mo>⊊</mo><mo separator="true">,</mo><mi mathvariant="normal">∅</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">∀</mi><mo separator="true">,</mo><mi mathvariant="normal">∃</mi><mo separator="true">,</mo><mi mathvariant="normal">∄</mi><mspace linebreak="newline"></mspace><mo>∵</mo><mo separator="true">,</mo><mo>∴</mo><mspace linebreak="newline"></mspace><mi mathvariant="double-struck">R</mi><mo separator="true">,</mo><mi mathvariant="double-struck">N</mi><mo separator="true">,</mo><mi mathvariant="double-struck">Z</mi><mo separator="true">,</mo><mi mathvariant="double-struck">Q</mi><mspace linebreak="newline"></mspace><mi mathvariant="script">F</mi><mspace linebreak="newline"></mspace><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mrow><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow><mo separator="true">,</mo><mo>⋱</mo><mspace linebreak="newline"></mspace><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mi mathvariant="normal">∂</mi><mo separator="true">,</mo><mi mathvariant="normal">∇</mi><mo separator="true">,</mo><mo>∝</mo><mo separator="true">,</mo><mi mathvariant="normal">°</mi><mspace linebreak="newline"></mspace><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>sec</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>tan</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>tanh</mi><mo>⁡</mo><mi>x</mi><mspace linebreak="newline"></mspace><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>x</mi><mo separator="true">,</mo><mi>ln</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>lg</mi><mo>⁡</mo><mi>x</mi><mspace linebreak="newline"></mspace><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mi>x</mi><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi>max</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>min</mi><mo>⁡</mo><mi>x</mi><mspace linebreak="newline"></mspace><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>N</mi></munderover><mo separator="true">,</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mspace linebreak="newline"></mspace><mo>∫</mo><mo separator="true">,</mo><mo>∬</mo><mo separator="true">,</mo><mo>∭</mo><mo separator="true">,</mo><mo>∮</mo><mo separator="true">,</mo><mo>∯</mo><mspace linebreak="newline"></mspace><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mn>0</mn></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext> </mtext><mtext>d</mtext><mi>x</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">+-\\\times,\cdot, \div\\\pm,\mp\\&gt;,&lt;,\ge,\le,\gg,\ll,\ne,\approx,\equiv\\\cap,\cup,\in,\notin,\subset,\subseteq,\subsetneq,\varnothing\\\forall, \exists,\nexists\\\because, \therefore\\\R,\N,\Z,\mathbb Q\\\mathcal F\\\cdots, \vdots, \ddots\\\infty,\partial,\nabla, \propto, \degree\\\sin x, \sec x, \cos x, \tan x, \tanh x\\\log _2 x, \ln x, \lg x\\\lim _{x \to 0} \frac {x}{\sin x}\\\max x, \min x\\\sum _{i=0}^{N}, \prod _{i=1}^{N}\\\int, \iint, \iiint, \oint, \oiint\\ \int _{-\infty}^0 f(x)\,\text d x\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord">×</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">⋅</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">÷</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord">±</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∓</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≫</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≪</span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span><span class="base"><span class="strut" style="height:0.6776em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span></span><span class="base"><span class="strut" style="height:0.6582em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord">∩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∪</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊆</span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⊊</span></span><span class="base"><span class="strut" style="height:0.7761em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord amsrm">∅</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∃</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord amsrm">∄</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∵</span></span><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">∴</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8833em;vertical-align:-0.1944em;"></span><span class="mord mathbb">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbb">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbb">Z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbb">Q</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal" style="margin-right:0.09931em;">F</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.6944em;vertical-align:-0.1944em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋱</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∇</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∝</span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">°</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sec</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">tanh</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.8247em;vertical-align:-0.7171em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.3829em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7171em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8623em;vertical-align:-0.1944em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">min</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.2222em;vertical-align:-0.8622em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.001em;">∬</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.001em;">∭</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∮</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop vlist-t vlist-t2" style="position:relative;top:-0.001em;"><span class="vlist-r"><span class="vlist" style="height:1.36em;"><span style="top:-3.36em;"><span class="pstrut" style="height:3.36em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;">∬</span></span><span style="top:-3.28em;"><span class="pstrut" style="height:3.36em;"></span><span class="overlay" style="height:0.659em;width:1.472em;"><svg xmlns="http://www.w3.org/2000/svg" width="1.472em" height="0.659em" style="width:1.472em" viewBox="0 0 1472 659" preserveAspectRatio="xMinYMin"><path d="M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230zm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2c0 110 84 276 504 276s502.4-166 502.4-276z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.862em;"><span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.5343em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.564em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">d</span></span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+-\\</span><br><span class="line">\times,\cdot, \div\\</span><br><span class="line">\pm,\mp\\</span><br><span class="line">&gt;,&lt;,\ge,\le,\gg,\ll,\ne,\approx,\equiv\\</span><br><span class="line">\cap,\cup,\in,\notin,\subset,\subseteq,\subsetneq,\varnothing\\</span><br><span class="line">\forall, \exists,\nexists\\</span><br><span class="line">\because, \therefore\\</span><br><span class="line">\R,\N,\Z,\mathbb Q\\</span><br><span class="line">\mathcal F\\</span><br><span class="line">\cdots, \vdots, \ddots\\</span><br><span class="line">\infty,\partial,\nabla, \propto, \degree\\</span><br><span class="line">\sin x, \sec x, \cos x, \tan x, \tanh x\\</span><br><span class="line">\log _2 x, \ln x, \lg x\\</span><br><span class="line">\lim _&#123;x \to 0&#125; \frac &#123;x&#125;&#123;\sin x&#125;\\</span><br><span class="line">\max x, \min x\\</span><br><span class="line">\sum _&#123;i=0&#125;^&#123;N&#125;, \prod _&#123;i=1&#125;^&#123;N&#125;\\</span><br><span class="line">\int, \iint, \iiint, \oint, \oiint\\ </span><br><span class="line">\int _&#123;-\infty&#125;^0 f(x)\,\text d x\\</span><br></pre></td></tr></table></figure><blockquote><p>pm(plus,minus)<br>mp(minus,plus)<br>approx(approximate)<br>equiv(equivalent)<br>mathcal(calligraphy书法)<br>propto(proportional to正比于)<br>degree(度)</p></blockquote><h3 id="向量">向量</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo stretchy="true">→</mo></mover><mspace linebreak="newline"></mspace><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\vec a, \overrightarrow{AB}\\\bar x, \overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3998em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2053em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span class="svg-align" style="top:-3.6833em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewBox="0 0 400000 522" preserveAspectRatio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\vec a, \overrightarrow&#123;AB&#125;\\</span><br><span class="line">\bar x, \overline&#123;x&#125;</span><br></pre></td></tr></table></figure><h3 id="间隔">间隔</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>a</mi><mspace linebreak="newline"></mspace><mi>a</mi><mtext> </mtext><mi>a</mi><mspace linebreak="newline"></mspace><mi>a</mi><mtext>  </mtext><mi>a</mi><mspace linebreak="newline"></mspace><mi>a</mi><mtext> </mtext><mi>a</mi><mspace linebreak="newline"></mspace><mi>a</mi><mspace width="1em"/><mi>a</mi><mspace linebreak="newline"></mspace><mi>a</mi><mspace width="2em"/><mi>a</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">a\,a\\a\:a\\a\;a\\a\ a\\a\quad a\\a\qquad a\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord mathnormal">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathnormal">a</span></span><span class="mspace newline"></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a\,a\\</span><br><span class="line">a\:a\\</span><br><span class="line">a\;a\\</span><br><span class="line">a\ a\\</span><br><span class="line">a\quad a\\</span><br><span class="line">a\qquad a\\</span><br></pre></td></tr></table></figure><h3 id="箭头">箭头</h3><p><img src="https://garsia.math.yorku.ca/MPWP/LATEXmath/arrow1.gif" alt=""></p><h3 id="括号与定界符">括号与定界符</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">⌈</mo><mo separator="true">,</mo><mo stretchy="false">⌉</mo><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mo separator="true">,</mo><mo stretchy="false">⌋</mo><mspace linebreak="newline"></mspace><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mfrac><mn>1</mn><mi>a</mi></mfrac><mo fence="true">]</mo></mrow><mspace linebreak="newline"></mspace><msub><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mo fence="true">∣</mo></mrow><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\lceil,\rceil,\lfloor,\rfloor\\\left(a,\frac{1}{a}\right]\\\left.\frac{\partial x}{\partial y}\right|_{x=0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">⌉</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">⌊</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">⌋</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.4497em;vertical-align:-0.9997em;"></span><span class="minner"><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.45em;"><span class="pstrut" style="height:4.4em;"></span><span style="width:0.333em;height:2.400em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.333em" height="2.400em" viewBox="0 0 333 2400"><path d="M145 15 v585 v1200 v585 c2.667,10,9.667,15,21,15c10,0,16.667,-5,20,-15 v-585 v-1200 v-585 c-2.667,-10,-9.667,-15,-21,-15c-10,0,-16.667,5,-20,15z M188 15 H145 v585 v1200 v585 h43z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.5486em;"><span style="top:-1.7003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9997em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\lceil,\rceil,\lfloor,\rfloor\\</span><br><span class="line">\left(a,\frac&#123;1&#125;&#123;a&#125;\right]\\</span><br><span class="line">\left.\frac&#123;\partial x&#125;&#123;\partial y&#125;\right|_&#123;x=0&#125;</span><br></pre></td></tr></table></figure><h3 id="多行公式">多行公式</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>e</mi><mo>+</mo><mi>f</mi></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><mspace linebreak="newline"></mspace><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>y</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>其他</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\begin{align}  a &amp;= b + c + d \\  &amp;= e + f\end{align}\\f(x) =\begin{cases}\sin x + sin y, &amp;x ,y &gt; 0\\0, &amp;其他\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="eqn-num"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">其他</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">  a &amp;= b + c + d \\</span><br><span class="line">  &amp;= e + f</span><br><span class="line">\end&#123;align&#125;\\</span><br><span class="line">f(x) =</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">\sin x + sin y, &amp;x ,y &gt; 0\\</span><br><span class="line">0, &amp;其他</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Tips: &amp;代表对齐的位置</p></blockquote><h3 id="矩阵">矩阵</h3><p>matrix,bmatrix,pmatrix,vmatrix</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>e</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>f</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>g</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}a &amp; b &amp;\cdots &amp;c\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\e &amp; f &amp;\cdots &amp;g\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.26em;vertical-align:-1.88em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35em;"><span style="top:-4.35em;"><span class="pstrut" style="height:6.2em;"></span><span style="width:0.667em;height:4.200em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.200em" viewBox="0 0 667 4200"><path d="M403 1759 V84 H666 V0 H319 V1759 v600 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v600 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.85em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.38em;"><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.88em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.38em;"><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.88em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.38em;"><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.98em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.88em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.38em;"><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.88em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35em;"><span style="top:-4.35em;"><span class="pstrut" style="height:6.2em;"></span><span style="width:0.667em;height:4.200em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.200em" viewBox="0 0 667 4200"><path d="M347 1759 V0 H0 V84 H263 V1759 v600 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v600 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.85em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="最后补充">最后补充</h3><ul><li><p>\代表换行</p></li><li><a href="/2025/02/01/Latex%E5%85%A5%E9%97%A8/" title="Latex入门">Latex入门</a>正式文档用Latex，日常笔记用markdown</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Intro: 本文按常用的语法排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用&quot;&gt;常用&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;举例&lt;/th&gt;
&lt;th&gt;是否可以多级&lt;</summary>
      
    
    
    
    
    <category term="工具" scheme="http://qingw.zxy/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Deepseek本地部署</title>
    <link href="http://qingw.zxy/2025/01/30/deepseek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/"/>
    <id>http://qingw.zxy/2025/01/30/deepseek%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</id>
    <published>2025-01-30T14:29:31.322Z</published>
    <updated>2025-02-01T14:47:26.004Z</updated>
    
    <content type="html"><![CDATA[<p><strong>linux下载ollama</strong></p><p><code>curl -fsSL https://ollama.com/install.sh | sh</code></p><p><strong>安装对应版本</strong></p><p><code>ollama run deepseek-r1:8b</code></p><p><strong>创建对应文件</strong></p><p><code>mkdir ds.conf.d &amp;&amp; vim yuzi</code></p><p><strong>输入内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM deepseek-r1:8b</span><br><span class="line">PARAMETER temperature 1</span><br><span class="line">SYSTEM &quot;&quot;&quot;</span><br><span class="line">基础信息</span><br><span class="line">  4 姓名：北白川玉子（きたしらかわ たまこ / Kitashirakawa Tamako）</span><br><span class="line">  5 年龄：16岁（故事开始时为高中一年级学生）</span><br><span class="line">  6 生日：12月31日（除夕日出生，与家中年糕店“玉屋”的跨年传统呼应）</span><br><span class="line">  7 身高：156cm（略矮于同龄女生，体型纤细但活力充沛）</span><br><span class="line">  8 代表色：樱花粉（发带/围裙）+ 暖米白（传统服饰）</span><br><span class="line">  9 口头禅：“大丈夫だよ～！”（没关系啦～！） + 思考时无意识揉捏年糕团</span><br><span class="line">  &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><strong>加载模型</strong></p><p><code>ollama create yuzi -f ./yuzi</code></p><hr><blockquote><p>大功告成</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;linux下载ollama&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -fsSL https://ollama.com/install.sh | sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装对应版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;c</summary>
      
    
    
    
    
    <category term="其他" scheme="http://qingw.zxy/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Vim命令</title>
    <link href="http://qingw.zxy/2025/01/27/vim%E5%91%BD%E4%BB%A4/"/>
    <id>http://qingw.zxy/2025/01/27/vim%E5%91%BD%E4%BB%A4/</id>
    <published>2025-01-27T04:14:32.477Z</published>
    <updated>2025-02-01T04:40:14.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>As is known to all, vim has many mode such as <strong>normal</strong>, <strong>insert</strong>, <strong>visual</strong>, and <code>ESC</code>–&gt;<code>normal</code>, <code>i/a</code>–&gt;<code>insert</code>, <code>v</code>–&gt;<code>visual</code>, <code>r</code>–&gt;<code>replace</code></p></blockquote><blockquote><p>Tips: <code>a</code>是向右移一格后insert</p></blockquote><h2 id="normal">normal</h2><h3 id="标签页"><strong>标签页</strong></h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:tabnew(tabe) file</code></td><td>新开标签页</td></tr><tr><td><code>:tabn N</code></td><td>切换标签页</td></tr><tr><td><code>gt</code></td><td>下一个标签页</td></tr><tr><td><code>Gt</code></td><td>上一个标签页</td></tr></tbody></table><h3 id="窗口"><strong>窗口</strong></h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>:vsplit</code></td><td>垂直分割</td></tr><tr><td><code>:split</code></td><td>水平分割</td></tr><tr><td><code>^w +(hjkl)</code></td><td>切换窗口</td></tr><tr><td><code>^w + c 或 :q</code></td><td>关闭当前窗口</td></tr></tbody></table><h3 id="快速定位"><strong>快速定位</strong></h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>b</code></td><td>单词开头</td></tr><tr><td><code>e</code></td><td>单词结尾</td></tr><tr><td><code>0</code></td><td>行开头</td></tr><tr><td><code>^</code></td><td>行首个非空字符</td></tr><tr><td><code>$</code></td><td>行尾</td></tr></tbody></table><blockquote><p>Tips: 空字符包括Space,CR,LF,Tab</p></blockquote><h3 id="编辑操作"><strong>编辑操作</strong></h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>o(O)</code></td><td>向下(上)开新行</td></tr><tr><td><code>u(^r)</code></td><td>撤销(重做)</td></tr><tr><td><code>f(F)&quot;</code></td><td>跳转到下(上)一个&quot;</td></tr><tr><td><code>:f xxx</code></td><td>重命名当前buffer</td></tr><tr><td><code>de</code></td><td>删除到下一个空格</td></tr><tr><td><code>dw</code></td><td>删除到下一个单词</td></tr><tr><td><code>dd</code></td><td>删除行</td></tr><tr><td><code>ce</code>,<code>cw</code>,<code>cc</code></td><td>同上，但执行后进入插入模式</td></tr><tr><td><code>x</code></td><td>删除char</td></tr><tr><td><code>rx</code></td><td>替换</td></tr><tr><td><code>y</code></td><td>复制,操作同d</td></tr><tr><td><code>p</code></td><td>粘贴</td></tr><tr><td><code>~</code></td><td>改变大小写</td></tr><tr><td><code>ci[</code></td><td>删除[]里的内容并进入插入模式</td></tr><tr><td><code>ca[</code></td><td>删除[]里的内容(包括[])并进入插入模式</td></tr></tbody></table><blockquote><p>Tips: 在操作前加入数字代表操作多少次<br><code>nf&quot;</code> --&gt; 跳转到下三个&quot;<br><code>df&quot;</code> --&gt; 删除到下一个&quot;</p></blockquote><h3 id="页面滚动"><strong>页面滚动</strong></h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>^u</code></td><td>向上滚动up</td></tr><tr><td><code>^d</code></td><td>向下滚动down</td></tr><tr><td><code>gg</code></td><td>回到文件顶部</td></tr><tr><td><code>G</code></td><td>回到文件底部</td></tr><tr><td><code>:n</code></td><td>到第n行</td></tr></tbody></table><h3 id="搜索"><strong>搜索</strong></h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>/</code></td><td>搜索</td></tr><tr><td><code>n(N)</code></td><td>下一个(上一个)匹配项</td></tr></tbody></table><h3 id="拓展"><strong>拓展</strong></h3><blockquote><p>在命令行输入<code>vim .</code>后选择一个文件可以<code>dw</code>来删除该文件或者目录<br>插件Nerdtree可以实现编辑器内查看文件目录(请读者自行了解，一定不是作者记不住🥹)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;As is known to all, vim has many mode such as &lt;strong&gt;normal&lt;/strong&gt;, &lt;strong&gt;insert&lt;/strong&gt;, &lt;strong&gt;visual&lt;/strong&gt;, and</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LinuxTravel</title>
    <link href="http://qingw.zxy/2025/01/26/LinuxTravel/"/>
    <id>http://qingw.zxy/2025/01/26/LinuxTravel/</id>
    <published>2025-01-26T03:07:50.533Z</published>
    <updated>2025-02-08T13:13:50.844Z</updated>
    
    <content type="html"><![CDATA[<h1>1.Linux之旅</h1><h2 id="1-1前言">1.1前言</h2><blockquote><p>记录本人的Ubuntu之旅<br>Linux路上凶险很多,实在解决不了的问题就重装系统吧🥹</p></blockquote><h2 id="1-2初始化">1.2初始化</h2><h3 id="1-2-1WSL2下安装-Ubuntu和共享网络">1.2.1WSL2下安装 Ubuntu和共享网络</h3><p><strong>第一步</strong></p><ul><li>控制面板 - &gt; 程序 -&gt; 启用或关闭windows功能 -&gt; 开启<u>适用于windows的子系统</u>和<u>虚拟机平台</u> -&gt; 重启电脑</li></ul><p><strong>第二步</strong></p><ul><li><p><code>win+r</code> -&gt; <code>powershell</code> -&gt; <code>wsl --install Ubuntu-22.04</code></p><blockquote><p>Tips : wsl --list --online 查看发行版名称<br><strong>第三步</strong></p></blockquote></li><li><p>在C:\Users\用户名.wslconfig里输入(不要#后内容)</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[experimental]</span><br><span class="line">networkingMode=mirrored # 这意味着 WSL2 的网络接口会直接映射到宿主机上</span><br><span class="line">dnsTunneling=true # WSL2 会通过宿主机来解析 DNS</span><br><span class="line">firewall=true # WSL2 会使用 Windows 防火墙来过滤网络流量</span><br><span class="line">autoProxy=true # WSL2 会自动继承宿主机上的代理设置</span><br><span class="line">sparseVhd=true # WSL2 的虚拟硬盘会采用稀疏文件格式，即只有实际使用到的部分才会占用磁盘空间。这可以节省磁盘空间。</span><br></pre></td></tr></table></figure><h3 id="1-2-2Ubuntu换源">1.2.2Ubuntu换源</h3><p><strong>第一步</strong></p><ul><li>前往<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华源</a>并找到对应版本替换<code>/etc/apt/sources.list</code></li></ul><p><strong>第二步</strong></p><ul><li><code>sudo apt update &amp;&amp; sudo apt upgrade -y</code>更新软件包</li></ul><h3 id="1-2-3终端美化">1.2.3终端美化</h3><p><img src="img/zdmh.png" alt=""></p><h3 id="1-2-4zsh美化">1.2.4zsh美化</h3><ul><li><code>sudo apt install zsh git curl -y</code></li></ul><blockquote><p>Tips: curl — client url</p></blockquote><ul><li><code>chsh -s /bin/zsh </code> 设置默认终端</li></ul><table><thead><tr><th>Method</th><th>Command</th></tr></thead><tbody><tr><td>curl</td><td>sh -c “$(curl -fsSL <a href="https://install.ohmyz.sh/">https://install.ohmyz.sh/</a>)”</td></tr><tr><td>wget</td><td>sh -c “$(wget -O- <a href="https://install.ohmyz.sh/">https://install.ohmyz.sh/</a>)”</td></tr><tr><td>fetch</td><td>sh -c “$(fetch -o - <a href="https://install.ohmyz.sh/">https://install.ohmyz.sh/</a>)”</td></tr><tr><td>国内curl镜像</td><td>sh -c “$(curl -fsSL <a href="https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh">https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh</a>)”</td></tr><tr><td>国内wget镜像</td><td>sh -c “$(wget -O- <a href="https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh">https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh</a>)”</td></tr></tbody></table><blockquote><p>Tips:<br>curl -f --fail 不显示http错误消息<br>-s 不输出进度条和错误<br>-S 只输出错误<br>-L 支持重定向d<br>sh -c 使用sh(命令解释器)执行之后的脚本,$(command)符号将输出变成输入<br>wget -O file将下载的信息保存在file中, 而-O-表示输出到终端</p></blockquote><blockquote><p>Thoughs:<br>没有魔法可以去gitee上找开源项目的镜像网址</p></blockquote><p><strong>下载主题</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国用户可以使用 gitee.com 上的官方镜像加速下载</span></span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><ul><li><code>ZSH_THEME=&quot;haoomz&quot;</code></li><li><code>source ~/.zshrc</code> 加载配置文件</li></ul><p><strong>下载插件</strong></p><ul><li>zsh-autosuggestion命令补全</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国用户可以使用下面任意一个加速下载</span></span><br><span class="line"><span class="comment"># 加速1</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.moeyy.xyz/https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># 加速2</span></span><br><span class="line">git <span class="built_in">clone</span> https://gh.xmly.dev/https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># 加速3</span></span><br><span class="line">git <span class="built_in">clone</span> https://gh.api.99988866.xyz/https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><ul><li>zsh-syntax-highlighting语法检验</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国用户可以使用下面任意一个加速下载</span></span><br><span class="line"><span class="comment"># 加速1</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.moeyy.xyz/https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># 加速2</span></span><br><span class="line">git <span class="built_in">clone</span> https://gh.xmly.dev/https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># 加速3</span></span><br><span class="line">git <span class="built_in">clone</span> https://gh.api.99988866.xyz/https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><ul><li>z<blockquote><p>oh-my-zsh 内置了 z 插件。z 是一个文件夹快捷跳转插件，对于曾经跳转过的目录，只需要输入最终目标文件夹名称，就可以快速跳转，避免再输入长串路径，提高切换文件夹的效率</p></blockquote></li><li>extract<blockquote><p>oh-my-zsh 内置了 extract 插件。extract 用于解压任何压缩文件，不必根据压缩文件的后缀名来记忆压缩软件。使用 x 命令即可解压文件</p></blockquote></li><li>websearch<blockquote><p>oh-my-zsh 内置了 web-search 插件。web-search 能让我们在命令行中使用搜索引擎进行搜索。使用搜索引擎关键字+搜索内容 即可自动打开浏览器进行搜索。如baidu 天气预报</p></blockquote></li></ul><p><strong>修改~/.zshrc</strong></p><ul><li><code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting z extract web-search)</code></li><li><code>source ~/.zshrc</code> 加载配置文件</li></ul><p><a href="https://www.haoyep.com/posts/zsh-config-oh-my-zsh">本文参考</a></p><p><i class="fas fa-pen"></i> 大功告成…</p><h3 id="1-2-5vim美化">1.2.5vim美化</h3><p><strong>下载较新的vim</strong></p><ol><li><code>sudo add-apt-repository ppa:vim/stable</code></li><li><code>sudo apt update</code></li><li><code>sudo apt install vim</code></li></ol><blockquote><p>Tips: 利用git安装最新版</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vim/vim.git</span><br><span class="line"><span class="built_in">cd</span> vim/src</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>免责声明: 作者没试过，出现依赖问题自行解决🤣</p></blockquote><p><strong>配置文件</strong><br>以下是本人的仅供参考</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> confirm <span class="string">&quot;确认文件是否保存</span></span><br><span class="line"><span class="string">set wildmenu &quot;</span>按TAB键时命令行自动补齐</span><br><span class="line"><span class="built_in">set</span> ignorecase <span class="string">&quot;忽略大小写</span></span><br><span class="line"><span class="string">set number &quot;</span>显示行号<span class="string">&quot;</span></span><br><span class="line"><span class="string">set relativenumber &quot;</span>相对行号</span><br><span class="line"><span class="built_in">set</span> ruler <span class="string">&quot;显示当前光标位置</span></span><br><span class="line"><span class="string">set autoread &quot;</span>文件在Vim之外修改过，自动重新读入</span><br><span class="line"><span class="built_in">set</span> autowrite <span class="string">&quot;设置自动保存内容</span></span><br><span class="line"><span class="string">set autochdir &quot;</span>当前目录随着被编辑文件的改变而改变</span><br><span class="line"><span class="built_in">set</span> nocp <span class="string">&quot;使用vim而非vi</span></span><br><span class="line"><span class="string">set laststatus=2 &quot;</span>永远显示状态栏</span><br><span class="line">filetype on <span class="string">&quot;启动文件类型检查</span></span><br><span class="line"><span class="string">syntax on &quot;</span>启动语法高亮</span><br><span class="line"><span class="built_in">set</span> cindent <span class="string">&quot;c/c++自动缩进&quot;</span></span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"><span class="built_in">set</span> autoindent <span class="string">&quot;参考上一行的缩进方式进行自动缩进&quot;</span></span><br><span class="line">filetype indent on <span class="string">&quot;根据文件类型进行缩进</span></span><br><span class="line"><span class="string">set softtabstop=4 &quot;</span>4 character as a tab<span class="string">&quot;</span></span><br><span class="line"><span class="string">set shiftwidth=4</span></span><br><span class="line"><span class="string">set smarttab</span></span><br><span class="line"><span class="string">set hlsearch &quot;</span>开启搜索结果的高亮显示<span class="string">&quot;</span></span><br><span class="line"><span class="string">set incsearch &quot;</span>边输入边搜索(实时搜索)<span class="string">&quot;</span></span><br><span class="line"><span class="string">set colorcolumn=80</span></span><br><span class="line"><span class="string">set updatetime=100</span></span><br><span class="line"><span class="string">nnoremap &lt;A-Left&gt; :tabprevious&lt;CR&gt; &quot;</span>ALT加箭头切换标签页</span><br><span class="line">nnoremap &lt;A-Right&gt; :tabnext&lt;CR&gt;</span><br><span class="line">nmap ;s :%s/\&lt;&lt;<span class="string">C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;\&gt;/</span></span><br><span class="line"><span class="string">nmap ;g :vimgrep &lt;C</span>-R&gt;=<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)&lt;CR&gt;</span><br><span class="line">vnoremap &lt;C-c&gt; :w !xclip -selection clipboard&lt;CR&gt;&lt;CR&gt;</span><br><span class="line"> <span class="keyword">if</span> has(<span class="string">&quot;multi_byte&quot;</span>)</span><br><span class="line">    <span class="built_in">set</span> fileencodings=utf-8,ucs-bom,cp936,cp1250,big5,euc-jp,euc-kr,latin1</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    echoerr <span class="string">&quot;Sorry, this version of (g)vim was not compiled with multi_byte&quot;</span></span><br><span class="line"> endif</span><br><span class="line"> <span class="string">&quot;-----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string"> &quot;</span>-----------------------------------------------------------------------------</span><br><span class="line"> <span class="string">&quot;-----------------------------插件--------------------------------------------</span></span><br><span class="line"><span class="string"> call plug#begin()</span></span><br><span class="line"><span class="string"> Plug &#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"><span class="string"> let g:airline_powerline_fonts = 1 &quot;</span> 支持 powerline 字体</span><br><span class="line"> <span class="built_in">let</span> g:airline#extensions#tabline#enabled = 1 <span class="string">&quot; 显示窗口tab和buffer</span></span><br><span class="line"><span class="string"> let g:airline_left_sep = &#x27;▶&#x27;</span></span><br><span class="line"><span class="string"> let g:airline_left_alt_sep = &#x27;❯&#x27;</span></span><br><span class="line"><span class="string"> let g:airline_right_sep = &#x27;◀&#x27;</span></span><br><span class="line"><span class="string"> let g:airline_right_alt_sep = &#x27;❮&#x27;</span></span><br><span class="line"><span class="string"> Plug &#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line"><span class="string"> map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt; </span></span><br><span class="line"><span class="string"> Plug &#x27;joshdick/onedark.vim&#x27;</span></span><br><span class="line"><span class="string"> Plug &#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line"><span class="string"> call plug#end()</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> colorscheme onedark</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><blockquote><p>Tips: <code>sudo apt install xclip</code>然后可以ctrl+c把vim的内容复制到系统剪切板</p></blockquote><p><strong>下载vim插件</strong></p><ul><li><code>curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</code></li><li>~/.vimrc -&gt;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call plug#begin() </span><br><span class="line">Plug xxx</span><br><span class="line">Plug xxx</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure><ul><li>具体插件见<a href="https://vimawesome.com/">vimawsome</a></li><li><a href="/2025/01/27/vim%E5%91%BD%E4%BB%A4/" title="vim命令">vim命令可见我的拙见</a></li></ul><h2 id="1-3开始启程">1.3开始启程</h2><h3 id="1-3-1-推荐工具">1.3 .1 推荐工具</h3><p><a href="https://www.bilibili.com/video/BV1n1yfYpEgM/">参考B站</a></p><p><a href="github.com/knassar702/awesome-linux-minimalism">Github</a></p><ol><li><p>neofetch – 展示操作系统等信息 --&gt; <code>sudo apt install neofetch</code></p></li><li><p>w3m – 文本浏览器 --&gt; <code>sudo apt install w3m</code></p></li><li><p>mpv – 视频播放器 --&gt; <code>sudo apt install mpv</code></p></li><li><p>ncmpcpp – 音乐播放器 --&gt; <code>sudo apt install ncmpcpp</code><br><a href="https://blog.yangmame.org/mpd-ncmpcpp%E9%85%8D%E7%BD%AE%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B.html">音乐播放器教程</a>作者表示为网易云资深用户不想折腾</p></li><li><p>nomacs – 图片查看器 --&gt; <code>sudo apt install nomacs</code></p></li><li><p>pass – 密码管理器 --&gt; <code>sudo apt install pass</code></p></li><li><p>zip – 压缩工具 --&gt; <code>sudo apt install zip</code> --&gt; <code>zip -r data.zip file1 file2 dir1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key # 生成gpg密钥</span><br><span class="line">pass init name # 主目录-&gt;.password-store目录</span><br><span class="line">pass add your_service # 创建</span><br><span class="line">pass show your_service # 展示</span><br><span class="line">pass edit your_service # 编辑</span><br><span class="line">pass # 列出所有密码</span><br><span class="line">高级用法</span><br><span class="line">pass add social/facebook # 密码分类</span><br><span class="line">pass | grep facebook # 搜索</span><br><span class="line">pass | xclip -sel clip # 复制到系统剪贴板</span><br></pre></td></tr></table></figure></li><li><p>tree – 查看目录结构 --&gt; <code>sudo apt install tree</code></p></li><li><p>mc – 终端双窗口查看目录结构 --&gt; <code>sudo apt install mc</code></p><blockquote><p>Tips: 建议在~/.zshrc中写入<code>aliasmc='mc --nocolor'</code><br>进入之后下方的是f1,f2,f3…不是1,2,3<br>F9 -&gt; o -&gt; p -&gt; 空格选中Panel options -&gt; 只需要方向键既就可以进入目录或退出目录。</p></blockquote><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>Tab</td><td>两个窗口间移动</td></tr><tr><td><a href="https://cloud.tencent.com/developer/article/1326633">参考文章</a></td><td></td></tr></tbody></table></li></ol><h3 id="1-3-2命令知识手册">1.3.2命令知识手册</h3><ul><li>Good command -&gt; sudo !! --&gt; 读作!!(代表上一条命令)</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo=1</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$foo</span> // 1</span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">pwd</span>) // 将<span class="built_in">pwd</span>的输出转化为<span class="built_in">echo</span>的输入</span><br></pre></td></tr></table></figure><ul><li><p><strong>$的大作用🤣</strong></p><ol><li><code>&quot;$var&quot;</code>展开变量, <code>'$var'</code>不展开变量</li><li><code>$?</code> 上一条命令的返回码</li><li><code>$_</code> 上一条命令的最后一个参数</li><li><code>$$</code> 该shelld的PID --&gt; <code>sudo kill &quot;$$&quot; -9 </code>😁</li><li><code>$_</code> 上一条命令最后一个参数</li><li><code>$#</code> 上一条命令参数数量</li><li><code>$@</code> 上一条命名参数列表 --&gt; <code>for var in $@</code></li><li><code>$0</code> 第一个参数(脚本名称)</li><li><code>$&#123;1..9&#125;</code>参数…</li></ol></li><li><p><strong>; &amp;&amp; ||的大作用</strong></p><ol><li><code>cmd1 ; cmd2 ; cmd3</code> --&gt; 按顺序执行不论是否执行成功</li><li><code>cmd &amp;&amp; cmd2 &amp;&amp; cmd3</code> --&gt; 状态码为0才执行</li><li><code>cmd || cmd2 || cmd3</code> --&gt; 状态码为1才执行</li></ol></li><li><p><strong>重定向</strong></p><ol><li><code>&gt;</code> 标准输出</li><li><code>2&gt;</code> 标准错误</li><li><code>&amp;&gt;</code> 标准输出和标准错误</li></ol></li><li><p>了解一些常见的正则表达式</p></li></ul><table><thead><tr><th>符号</th><th>解释</th><th>速记</th></tr></thead><tbody><tr><td>.</td><td>任意字符</td><td>点子王</td></tr><tr><td>\w</td><td>字母,下划线,数字</td><td>变量名</td></tr><tr><td>\s</td><td>空白字符</td><td>space</td></tr><tr><td>\d</td><td>数字</td><td>digit</td></tr><tr><td>^</td><td>^xxx</td><td>以xxx开头</td></tr><tr><td>$</td><td>xxx$</td><td>以xxx结尾</td></tr><tr><td>\W\S\D</td><td>非wsd</td><td>…</td></tr><tr><td>[abc]</td><td>任意[]中的一个字符</td><td>任我选</td></tr><tr><td>[^abc]</td><td>出来[]中的任我选</td><td>…</td></tr><tr><td>次数</td><td>解释</td><td></td></tr><tr><td>*</td><td>0~n</td><td></td></tr><tr><td>+</td><td>1~n</td><td></td></tr><tr><td>?</td><td>0?1</td><td>布尔值</td></tr><tr><td>{n}</td><td>n</td><td></td></tr><tr><td>{m,n}</td><td>m~n</td><td></td></tr><tr><td>{*,+,?}?</td><td>禁用贪婪模式</td><td></td></tr></tbody></table><p><a href="https://deerchao.cn/tutorials/regex/regex.htm">详情见该博客</a></p><ul><li><p>图片转换</p><ol><li><code>convert input_file output_file </code></li><li>`convert a.jpg -resize widthxheight b.jpg</li></ol></li><li><p>{}的妙用</p><ol><li><code>mkdir foo&#123;1,2,a,b&#125;</code>会创建四个文件夹</li><li><code>mkdir foo&#123;1..9&#125;/&#123;a..z&#125;</code>会创建9x26个文件夹</li></ol></li><li><p><strong>find</strong></p><blockquote><p>给定路径下找文件(夹)的工具</p></blockquote><ul><li>格式 <code>find [path] [condition] [expr]</code></li></ul><table><thead><tr><th>condition</th><th>expr</th><th>解释</th></tr></thead><tbody><tr><td><code>-name</code></td><td>“*.cpp”</td><td>以cpp结尾</td></tr><tr><td><code>-size</code></td><td>“+10M”</td><td>超过10M</td></tr><tr><td><code>-ctime</code></td><td>&quot;+30</td><td>修改时间超过30天</td></tr><tr><td><code>-type</code></td><td>f/d/l</td><td>文件,文件夹,链接</td></tr><tr><td><code>-exec</code></td><td>command {}</td><td>对找到的文件执行操作</td></tr></tbody></table><blockquote><p>Tips: 可以同时指定多个选项</p></blockquote><blockquote><p>Extension: find支持的通配符并非所有正则表达式<br>只有 * ? [] {}<br>可以使用 <code>find path -regex &quot;expr&quot;</code></p></blockquote></li><li><p><strong>locate</strong></p><blockquote><p>依据已经建立的数据库在根目录下<strong>快速</strong>查找文件(夹)</p></blockquote><ol><li><code>sudo apt install mlocate</code> 下载软件包</li><li><code>sudo updatedb</code></li><li><code>locate [option] [file]</code></li><li><code>-i(gnore) -r(egex) -c(olumn)</code></li></ol></li><li><p><strong>rg</strong></p><blockquote><p>rust写的替代grep的工具,支持正则表达式,默认递归搜索(grep需要-r选项)<br>,自动忽略.gitignore文件</p></blockquote><ul><li>格式: <code>rg &lt;文本&gt; [文件或目录]</code></li><li>下载: <code>sudo apt install ripgrep</code></li></ul><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>--stats</code></td><td>显示统计信息</td></tr><tr><td><code>--type xxx</code></td><td>指定文件类型</td></tr><tr><td><code>-u</code></td><td>不忽略.文件</td></tr></tbody></table></li><li><p><strong>history</strong></p><ol><li><code>history n</code> 显示最近n条命令</li><li><code>!-n, !n, !!</code> 执行对应命令</li></ol></li><li><p><strong>tree</strong><br>常用选项</p><table><thead><tr><th>选项</th><th>用处</th></tr></thead><tbody><tr><td><code>-L x</code></td><td>限制层数</td></tr><tr><td><code>-h</code></td><td>k,m显示文件大小</td></tr></tbody></table><ul><li><code>ulimit</code></li><li><code>-a</code> 查看系统资源限制</li><li><code>-选项 -值</code> 修改系统资源限制</li></ul></li><li><p><strong>tail</strong></p></li></ul><blockquote><p>查看文件尾部内容</p></blockquote><ul><li><code>tail -n 20 file</code>查看倒数20行</li><li><code>tail -n +20 file</code>查看从20到末尾</li><li><code>tail -c 10 file</code> 查看倒数20个字符</li></ul><hr><blockquote><p>笑死了，你以为只有这点？ – 鲁迅<br>特此说明 ^ 代表 ctrl</p></blockquote><p>常见信号</p><table><thead><tr><th>操作</th><th>信号</th></tr></thead><tbody><tr><td><code>^c</code></td><td>SIGINT</td></tr><tr><td><code>^z</code></td><td>SIGSTOP</td></tr><tr><td><code>logout</code></td><td>SIGHUP</td></tr><tr><td><code>nohup</code></td><td>忽略SIGHUP,退出终端程序依旧运行</td></tr><tr><td><code>kill</code></td><td>SIGKILL</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">command &amp; -- 在后台运行</span><br><span class="line"># 当工作被STOP后可以</span><br><span class="line">jobs -- 查看后台作业</span><br><span class="line">bg %n -- 恢复到后台运行</span><br><span class="line">fg %n -- 恢复到前台运行</span><br><span class="line"># 如何精准的发送信号？</span><br><span class="line">kill -信号名 %n -- 发送信号</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1.Linux之旅&lt;/h1&gt;
&lt;h2 id=&quot;1-1前言&quot;&gt;1.1前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;记录本人的Ubuntu之旅&lt;br&gt;
Linux路上凶险很多,实在解决不了的问题就重装系统吧🥹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-2初始</summary>
      
    
    
    
    <category term="Linux" scheme="http://qingw.zxy/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://qingw.zxy/tags/Linux/"/>
    
  </entry>
  
</feed>
